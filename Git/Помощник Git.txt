/////////////////////////////////////////////////////////////////
//////////////// Помощник по GIT ////////////////////////////////
/////////////////////////////////////////////////////////////////
============================
ОСНОВНЫЕ КОМАНДЫ
============================
git init				Создание нового репозитория

git help				Помощь по гиту
git help команда		Получить помощь по конкретной команде
Например:
git help status

Начальная конфигурация Git:
git config --global user.name "Vitaliy Yakovlev"
git config --global user.email "yakoviatlik@mail.ru"
git config --global color.ui true

Создание проекта:
mkdir название_проекта
cd название_проекта			перейти в папку
git init					создать гит репозиторий из этой папки
git status					проверить наличие репозитория
clear						очищает экран терминала git

Базовая работа: создание файла
Просто создали файл			Статус "untracked"(ненаблюдаемый)
git add						Статус "Staged"(подготовленный)
git commit					Статус "Commited"(зафиксированный)

Пример:
Создал файл Test.java ->
Подготавливаем файл к коммиту: git add Test.java
Делаем коммит(фиксируем, делаем снимок): git commit

Базовая работа: изменение файла
Изменили файл				Статус "modified"
git add						Статус "Staged"(подготовленный)
git commit					Статус "Commited"(зафиксированный)

Пример:
Изменил файл Test.java, создал файл Hello.java ->

Подготавливаем файлы к коммиту: git add Test.java Hello.java (или например
								git add *.java)
								
Делаем коммит(фиксируем, делаем снимок): git commit

git commit -m "Сообщение снимка"

Разные способы сделать git add:
git add .					Добавить все файлы в текущей папке
git add *.java				Добавить все файлы в текущей папке с расширением .java
git add someDir/*.java		Добавить все файлы в папке someDir с расширением .java
git add someDir/			Добавить все файлы в папке someDir
git add "*.java"			Добавить все файлы в проекте с расширением java

git log						Посмотреть всю историю коммитов

git diff
Показывает разницу между текущим(неотслеживаемым) состоянием репозитория и последним 
снимком репозитория.

git diff --staged			Показывает разницу между текущим отслеживаемым
							состоянием репозитория и последним снимком репозитория
							
git diff COMMIT_ID			Показывает разницу между текущим состоянием
							 репозитория и указанным снимком репозитория
например:
git diff ce4149a46aebede82977d8596fdf548b57b89e95

=================================
git reset
=================================
Опасная команда. Может быть использована для переписывания истории.
Предназначена для отмены каких либо изменений в проекте, откате проекта к какому то снимку.

git reset HEAD^				Смещает указатель HEAD на один коммит в прошлое
git reset HEAD^^^			Смещает указатель HEAD на несколько позиций
Или можно писать так:
git reset HEAD~2

Есть 3 режима отката(разные по жесткости):
--soft	(самый мягкий)	
--mixed	(используется по умолчанию, более жесткий чем soft)
--hard	(максимально радикальный, удаляются изменения и перезаписывается история)

Синтаксис комманды reset:
git reset [--soft | --mixed | --hard] [commit]
Где commit - желаемый коммит. Может быть хэш коммита или вариация с HEAD.

Примеры:
git reset --hard HEAD^^
Возвращает проект к указанному коммиту, при этом полностью безвозвратно удаляет все
коммиты после указанного. 

git reset --mixed HEAD^^
При этом, git reset HEAD^^ = git reset --mixed HEAD^^
Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного 
в неотслеживаемую(unstaged) зону.

git reset --soft HEAD^^
Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного 
в отслеживаемую(staged) зону.

=================================
git checkout
=================================
Используется для перемещения между коммитами, версиями отдельных файлов, 
и ветками.
Временно сдвигает HEAD на выбранный комит чтобы посмотреть как выглядел проект.

git checkout <хэш commita>
git checkout HEAD^^
git checkout HEAD~2

Состояние проекта возвращается к состоянию снимка, но никакие коммиты не удаляются.
Указатель HEAD находится в состоянии DETACHED(отделенный). Он отделен от актуальной версии проекта. 
Любые изменения или коммиты, сделанные в этом состоянии удаляются сборщиком мусора 
при переходе к другому коммиту. 

git checkout master			Переход обратно к актуальному коммиту
master						Название текущей ветки

Перемещение между версиями отдельных файлов:
(При перемещении между файлами изменения могут сохраниться!)

git checkout <указатель коммита> -- путь_до_файла1 путь_до_файла2

Например:
git checkout ce4149a46aebede82977d8596fdf548b57b89e95 -- file1 file2

git checkout -- путь_до_файла1 путь_до_файла2

Пример:
git checkout -- file1
Возвращает файл1 к версии, которая у него была в последнем комите(HEAD).
Работает только для неотслеживаемых(untracked или modified) изменений.

git checkout -- .
Возвращает все файлы в репозитории к версии, которая была у них в последнем коммите(HEAD). 
Работает только для неотслеживаемых(untracked или modified) изменений.

Для того, чтобы удалить отслеживаемые изменения:
git reset (тоже самое что git reset --mixed HEAD) - переводит все отслеживаемые изменения в неотслеживаемые;
git checkout -- . - удаляем все неотслеживаемые изменения.

git checkout master			Произведет переключение на ветку master
git checkout --master		Произведет возвращение файла с названием master
							к версии из последнего коммита

============================
Дополнительные возможности 
комманды git commit
============================

git commit -a -m "Сообщение коммита" - тоже самое что последовательное выполнение git add и git commit
Единственное важное отличие - 
не добавляет в отслеживаемую зону (и в коммит соответсвенно) новые "untracked" файлы. 
Добавляет только моддицфицированные ("modified") файлы. 

git commit --amend -m "Новое сообщение коммита" - дополняет последний коммит, добавляя в него 
свежие изменения. Так же меняет сообщение последнего коммита. При этом, новый коммит не создается.

***
git clean
***
git clean -n 				покажет, какие файлы будут удалены
git clean -f				удалит файл(untracked)



============================
РАБОТА С УДАЛЕННЫМ РЕПОЗИТОРИЕМ
============================
push			толкать(отправлять)
pull			тянуть(вытягивать код из репозитория)

GitHub - провайдер удаленных репозиториев

****************
git remote
****************
Команда для настройки и просмотра удаленных репозиториев.

git remove -v				Просмотр списка существующих удаленных репозиториев

git remote add НАЗВАНИЕ_РЕПОЗИТОРИЯ АДРЕС_РЕПОЗИТОРИЯ - Добавить новый удаленный репозиторий, 
который находится по указанному адресу. При этом, на нашем компьютере к удаленному репозиторию мы будем 
обращаться по его названию. 

git remote remove НАЗВАНИЕ_РЕПОЗИТОРИЯ - удалить репозиторий с указанным названием. 

git push					Комманда для отправки локального репозитория на удаленный

git push НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА

Пример:
git push origin master		Отправляем на удаленный репозиторий с именем origin нашу ветку master

git pull					Команда для получения обновлений с удаленного репозитория

git pull origin master		Наш локальный репозиторий будет синхронизироваться с удаленным.

Примеры комманд:
git remote add energyassist https://github.com/yakovitalik/EnergyAssistant.git
git remote add energyassist https://github.com/yakovitalik/gefestfilms.git

git remote add todo https://github.com/yakovitalik/todo.git


****************
настройка SSH
****************
Проверка наличия ssh:
ls -al ~/.ssh				Проверить наличие

Создание ssh:
ssh-keygen -t rsa -b 4096 -C "yakovitalik@mail.ru"

Затем нужно будет нажать Enter для сохранения в папке по умолчанию и затем пароль 2 раза. 

****************
git clone
****************
Команда кланирует удаленный репозиторий
Вместо того, чтобы выполнять комманды git init, remote add.. и т.д. 
git clone АДРЕС_УДАЛЕННОГО_РЕПОЗИТОРИЯ

============================
ВЕТВЛЕНИЕ (BRANCHING)
============================

#commit merge  - коммит слияния

git branch название_ветки				Создание новой ветки
Например:
git branch some-feature
После создания ветки на нее нужно перейти командой git checkout.

git branch								Показывает, на какой ветке мы сейчас находимся

git branch -d название_ветки			Удаление ветки

Например:
git branch -d some-feature

git checkout название_ветки				Переключение между ветками
***************
Слияние
***************
git merge								Сливает одну ветку с другой

нужно сначала перейти на основную ветку командой git checkout master, 
а затем уже из основной ветки вызвать git merge some-feature.
И весь новый код из ветки some-feature переместится в основную ветку.
И далее уже может быть создан коммит слияния.

Если при слиянии попали в текстовый редактор vi, при слиянии нас все устраивает, то чтобы выйти
из этого редактора нужно ввести:
:wq

fast-forward - быстрое слияние, которое происходит если за время отсутствия в основной ветке ничего не произошло.
Если же в ветке master были изменения во время работы в другой ветке, то происходит другой вид слияния, например 
recursive.
В этом случае также будет создан отдельный коммит слияния(merge commit).

***************
Подробнее о git pull
***************

git branch -r							Выведет список удаленыых веток(из репозитория)

git pull origin master					Скачивает с удаленного репозиторрия ветку в локальный origin/master,
										затем просходит слияние с локальной веткой master


============================
git rebase (перебазирование)
============================

rebase - это альтернатива комманде merge.
Так же производит слияние веток, но при этом не производит коммитов слияния (что 
по мнению некоторых людей производит засорение веток).
Лучше использовать merge, если не просят делать конкретно rebase.

После разрешения конфликтов слияния, продолжить работу с помощью:
git rebase --comntinue
git rebase --abort		если не хотим, отменить слияние двух веток.














































