============================
КОЛЛЕКЦИИ ИЗ БИБЛИОТЕКИ JAVA
============================
Класс		Реализуемая структура		Описание

ArrayList	Списочный массив		Индексированная динамически расширяющаяся и сокращающаяся
						последовательность

LinkedList	Связный список			Упорядоченная последовательность, допускающая эффективную вставку и удаление
						на любой позиции

ArrayDeque	Двунаправленная очередь 	Реализуемая в виде циклического массива

HashSet		Хэш-Множество			Неупорядоченная коллекция, исключающая дубликаты

TreeSet		Древовидное множество		Отсортированное множество

EnumSet		Перечислимое множество		Множество значений перечислимого типа

LinkedНashSet	Связное хэш-множество		Множество, запоминающее порядок ввода элементов

PriorityQueue	Приоритетная очередь 		Коллекция, позволяющая эффективно удалять наименьший элемент

HashМap		Хэш-отображение			Структура данных для хранения связанных вместе пар "ключ-значение"

ТrееМар		Древовидное отображение		Отображение с отсортированными ключами

EnumМap		Перечислимое отображение	Отображение с ключами, относящимися к перечислимому типу

LinkedНashМap	Связное хэш-отображение		Отображение с запоминанием порядка, в котором добавлялись элементы

WeakHashМap	Слабое хэш-отображение		Отображение со значениями, которые могут удаляться системой сборки "мусора",
						если они нигде больше не используются

IdentityHashМap	Хэш-отображение идентичности	Отображение с ключами, сравниваемыми с помощью операции ==. а не вызова
						метода equals()
============================
*******************************************************************************
Преобразование массива в коллекцию:

String [] values = . . . ;
var staff = new HashSet<>(List.of(values));
============================
Интерфейс Collecion
============================

Коллекция не допускает дублирование объектов

public interface Collection<E>
{
	boolean add(E element);
	Iterator<E> iterator();
}

add();			Добавляет элемент в коллекцию (возвр true, если добавление изменило коллекцию и 
			false, если нет)
iterator();		Возвращает объект класса, реализующего интерфейст итератор

forEachRemaining();	Метод, применяемый с лямбда-выражением, для перебора элементов коллекции


Другие методы интерфейса:
int size ()
boolean isEmpty()
boolean contains(Object obj)
boolean containsAll(Collection<?> с)
boolean equals(Object other)
boolean addAll(Collection<? extends Е> from)
boolean remove(Object obj)
boolean removeAll(Collection<?> с)
void clear ()
boolean retainAll(Collection<?> с)
Object[] toArray()
<Т> Т[] toArray(T[] arrayToFill)
============================
Итераторы
============================
В состав интерфейса Iterator входят три метода:

public interface Iterator<E>
{
	E next();
	boolean hasNext();
	void remove();
}

next()		Обращается к каждому элементу коллекции по очереди
если будет достигнут конец коллекции, то метод next() сгенерирует исключение типа NoSuchElementException
Поэтому, перед next() нужно вызвать hasNext();

hasNext();	возвращает логическое значение true, если у объекта итератора все еще имеются 
		объекты, к которым можно обратиться.

Например:
Collection<String> с = . . . ;
Iterator<String> iter = c.iterator();
while (iter.hasNext())
{
	String element = iter.next();
	сделать что-нибудь с элементом element
}

Или в цикле:
for (String element : с)
{
	сделать что-нибудь с элементом element
}

Цикл в стиле for each подходит для любых объектов, класс которых реализует интерфейс
Iterable со следующим единственным методом:
public interface Iterable<E>
{
	Iterator<E> iterator();
}


remove();	удаляет элемент, который был возвращен при последнем вызове метода next ()

Например:
Iterator<String> it = c.iterator();
it.next(); 				// nройти первый элемент коллекции
it.remove(); 				//а теперь удалить его

Другие методы


*******************************************************************************
=============================
Интерфейс List
=============================
Методы:
void add(int index, Е element)
void remove(int index)
Е get(int index)
Е set(int index, Е element)

=============================
Интерфейс Map
=============================

=============================
Интерфейс ListIterator
=============================
void add(E element);		Метод для ввода элемента

Е previous();			Обход списка в обратном направлении
boolean hasPrevious()


=============================
Интерфейс Set
=============================


*******************************************************************************

=============================
Класс LinkedList		(Связный список)
=============================
Пример реализации:
var staff = new LinkedList<String>();
	// Объект типа LinkedList, реализующий связный список
staff.add("Amy");
staff.add("Bob");
staff.add("Carl");
Iterator<String> iter = staff.iterator();
String first = iter.next();	// обратиться к первому элементу
String second = iter.next();	// обратиться ко второму элементу
iter.remove();			// удалить последний перебираемый элемент


********************************************************************************
