
***********************************************************************************************************
					КОЛЛЕКЦИИ
***********************************************************************************************************

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.Collection<E>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Iterator<E> iterator()
	Возвращает итератор, который можно использовать для перебора элементов коллекции.
* int size ()
	Возвращает количество элементов, хранящихся в коллекции на данный момент.
* boolean isEmpty ()
	Возвращает логическое значение true, если коллекция не содержит ни одного из элементов.
* boolean contains (Object obj)
	Возвращает логическое значение true, если коллекция содержит объект, равный заданному объекту
	оbj.
* boolean containsAll (Collection<?> other)
	Возвращает логическое значение true, если коллекция содержит все элементы из другой коллекции.
* boolean add(Object e.lement)
	Добавляет элемент в коллекцию. Возвращает логическое значение true, если в результате вызова
	этого метода коллекция изменилась.
* boolean addAll(Collection<? extends Е> other)
	Добавляет все элементы из другой коллекции в данную. Возвращает логическое значение true,
	если в результате вызова этого метода коллекция изменилась.
* boolean remove(Object оbj)
	Удаляет из коллекции объект, равный заданному объекту obj. Возвращает логическое значение
	true, если в результате вызова этого метода коллекция изменилась.
* boolean removeAll (Collection<?> other)
	Удаляет из данной коллекции все элементы другой коллекции. Возвращает логическое значение
	true, если в результате вызова этого метода коллекция изменилась.
* default boolean removeif (Predicate<? super Е> fillter) В
	Удаляет из данной коллекции все элементы, для которых по заданному условию fil ter возвращается
	логическое значение true. Возвращает логическое значение true, если в результате вызова
	этого метода коллекция изменилась.
* void clear ()
	Удаляет все элементы из данной коллекции.
* boolean retainAll(Collection<?> other)
	Удаляет из данной коллекции все элементы, которые не равны ни одному из элементов другой
	коллекции. Возвращает логическое значение true, если в результате вызова этого метода коллекция
	изменилась.
* Object [] toArray ()
	Возвращает из коллекции массив объектов.
* <Т> Т [] toArray (Т [] arrayТoFill)
	Возвращает из коллекции массив объектов. Если заполняемый массив arrayТoFill имеет достаточную
	длину, он заполняется элементами данной коллекции. Если же остается место, добавляются
	пустые элементы lnull). В противном случае выделяется и заполняется новый массив с тем
	же типом элементов и длиной, что и у заданного массива arrayТoFill.
* static <Т> Ьoolean replaceAll (List<T> 1, T oldValue, Т newValue)
	Заменяет на newValue все элементы, равные oldValue.
* static int indexOfSubList (List<?> 1, List<?> s) 
* static int lastindexOfSubList (List<?> 1, List<?> s) 
	Возвращают индекс nервого и nоследнего nодсnисков 1, равных сnиску s, или значение -1, если
	ни один из nодсnисков 1 не равен сnиску s. Так, если сnисок 1 содержит элементы [s, t, а, r],
	а сnисок s - элементы [t, а, r], то оба метода возвращают индекс, равный 1.
* static void swap (List<?> 1, int i, int j) 1. 4
	Меняет местами элементы сnиска на указанных nоэициях.
* static void reverse (List<?> 1)
	Меняет nорядок следования элементов в сnиске. Наnример, в результате обращения сnиска [t, а,
	r] nорождается сnисок [r, а, t]. Этот метод выnолняется за время O(n), где п - длина сnиска.
* static void rotate (List<?> 1, int d)
	Циклически сдвигает элементы в сnиске, nеремещая элемент no индексу i на nозицию (i+d)
	% 1. size (). Наnример, в результате циклического сдвига сnиска [ t, а, r] на 2 nозиции
	nорождается сnисок [а, r, t]. Этот метод выnолняется за время Olnl, где п - длина сnиска.
* static int frequency(Collection<?> с, Object о) 
	Возвращает количество элементов в коллекции с, равных заданному объекту о.
* boolean disjoint (Collection<?> с1, Collection<?> с2) 
	Возвращает логическое значение true, если у коллекций отсутствуют общие элементы.
---
* boolean hasNext ()
	Возвращает логическое значение true, если в коллекции еще имеются элементы, к которым можно
	обратиться.
* Е next()
	Возвращает следующий перебираемый объект. Генерирует исключение типа NoSuchElement
	Exception, если достигнут конец коллекции.
* void remove ()
	Удаляет последний перебираемый объект. Этот метод должен вызываться сразу же после обращения
	к удаляемому элементу. Если коллекция была видоизменена после обращения к последнему
	ее элементу, этот метод генерирует исключение типа IllegalStateException.
* defaul t void forEachRemaining (Consumer<? super Е> action) 8
	Обходит элементы и передает их заданному действию до тех пор, пока в коллекции не останется
	ни одного элемента, а иначе в этом действии будет сгенерировано исключение.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
===================================
java.util.Collection<E>
===================================
* Iterator<E> iterator()
	Возвращает итератор, который можно использовать для перебора элементов коллекции.
* int size ()
	Возвращает количество элементов, хранящихся в коллекции на данный момент.
* boolean isEmpty ()
	Возвращает логическое значение true, если коллекция не содержит ни одного из элементов.
* boolean contains (Object obj)
	Возвращает логическое значение true, если коллекция содержит объект, равный заданному объекту оbj.
* boolean containsAll (Collection<?> other)
	Возвращает логическое значение true, если коллекция содержит все элементы из другой коллекции.
* boolean add(Object element)
	Добавляет элемент в коллекцию. Возвращает логическое значение true, если в результате вызова
	этого метода коллекция изменилась.
* boolean addAll(Collection<? extends Е> other)
	Добавляет все элементы из другой коллекции в данную. Возвращает логическое значение true,
	если в результате вызова этого метода коллекция изменилась.
* boolean remove(Object оbj)
	Удаляет из коллекции объект, равный заданному объекту obj. Возвращает логическое значение
	true, если в результате вызова этого метода коллекция изменилась.
* boolean removeAll (Collection<?> other)
	Удаляет из данной коллекции все элементы другой коллекции. Возвращает логическое значение
	true, если в результате вызова этого метода коллекция изменилась.
	default boolean removeif (Predicate<? super Е> fi.lter) В
	Удаляет из данной коллекции все элементы, для которых по заданному условию fil ter возвращается
	логическое значение true. Возвращает логическое значение true, если в результате вызова
	этого метода коллекция изменилась.
* void clear ()
	Удаляет все элементы из данной коллекции.
* boolean retainAll(Collection<?> other)
	Удаляет из данной коллекции все элементы, которые не равны ни одному из элементов другой
	коллекции. Возвращает логическое значение true, если в результате вызова этого метода коллекция
	изменилась.
* Object [] toArray ()
	Возвращает из коллекции массив объектов.
* <Т> Т [] toArray (Т [] arrayТoFill)
	Возвращает из коллекции массив объектов. Если заполняемый массив arrayТoFill имеет достаточную
	длину, он заполняется элементами данной коллекции. Если же остается место, добавляются
	пустые элементы lnull). В противном случае выделяется и заполняется новый массив с тем
	же типом элементов и длиной, что и у заданного массива arrayТoFill.
* boolean hasNext ()
	Возвращает логическое значение true, если в коллекции еще имеются элементы, к которым можно
	обратиться.
* Е next()
	Возвращает следующий перебираемый объект. Генерирует исключение типа NoSuchElement
	Exception, если достигнут конец коллекции.
* void re111ove ()
	Удаляет последний перебираемый объект. Этот метод должен вызываться сразу же после обращения
	к удаляемому элементу. Если коллекция была видоизменена после обращения к последнему
	ее элементу, этот метод генерирует исключение типа IllegalStateException.
* default void forEachRemaining (Consumer<? super Е> action) 
	Обходит элементы и передает их заданному действию до тех пор, пока в коллекции не останется
	ни одного элемента, а иначе в этом действии будет сгенерировано исключение.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
===================================
java.util.List<E>
===================================
* Listiterator<E> listiterator()
	Возвращает итератор сnиска, который можно исnользовать для nеребора элементов сnиска.
* Listiterator<E> listiterator(int index)
	Возвращает итератор сnиска для обращения к элементам сnиска, если в результате вызова метода
	next () возвращается элемент этого сnиска с заданным индексом.
* void add(int i, Е element)
	Вводит элемент на указанной nозиции в сnиске.
* void addAll (int i, Collection<? extends Е> elements)
	Вводит все элементы из коллекции на указанной nозиции в сnиске.
* Е remove (int i)
	Удаляет и возвращает элемент на указанной nозиции в сnиске.
* Е get (int i)
	Получает элемент на указанной позиции в списке.
* Е set(int i, Е element)
	Заменяет элемент на указанной позиции в списке новым элементом и возвращает прежний элемент.
* int indexOf (Object element)
	Возвращает позицию первого вхождения искомого элемента в списке или значение -1, если искомый
	элемент не найден.
* int lastindexOf (Object element)
	Возвращает позицию последнего вхождения искомого элемента в списке или значение -1, если
	искомый элемент не найден.

===================================
java.util.Listiterator<E>
===================================
* void add(E newElement)
	Вводит новый элемент до текущей позиции в списке.
* void set (Е newElement)
	Заменяет новым элементом последний элемент, обращение к которому было сделано при вызове
	метода next () или previous (). Генерирует исключение типа IllegalStateException,
	если структура списка была видоизменена в результате последнего вызова метода next () или
	previous () .
* boolean hasPrevious ()
	Возвращает логическое значение true, если имеется еще один элемент для обращения при итерации
	по списку в обратном направлении.
* Е previous ()
	Возвращает предыдущий объект. Генерирует исключение типа NoSuchElementException, если
	достигнуто начало списка.
* int nextindex()
	Возвращает индекс элемента, который должен быть возвращен при последующем вызове метода
	next().
* int previousindex()
	Возвращает индекс элемента, который должен быть возвращен при последующем вызове метода
	previous () .
===================================
java.util.HashSet<E>
===================================
* HashSet()
	Конструирует пустое хеш-множество.
* HashSet (Collection<? extends Е> elemen ts)
	Конструирует хеш-множество и вводит в него все элементы из коллекции.
* HashSet(int initialCapacity)
	Конструирует пустое хеш-множество заданной емкости (количество групп).
* HashSet(int initialCapacity, float loadFactor)
	Конструирует пустое хеш-множество заданной емкости и с указанным коэффициентом загрузки
	(числовым значением в пределах от О. О до 1. О, определяющим предельный процент заполнения
	хеш-таблицы, по достижении которого происходит повторное хеширование).
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
===================================
java.util.TreeSet<E>
===================================
* TreeSet()
* TreeSet (Comparator<? super Е> comparator)
	Конструируют nустое древовидное множество.
* TreeSet (Collection<? extends Е> elements)
* TreeSet (SortedSet<E> s)
	Конструируют древовидное множество и вводят в него все элементы из коллекции.

===================================
java.util.SortedSet<E>
===================================
* Comparator<? super Е> comparator()
	Возвращает компаратор для сортировки элементов или nустое значение null, если элементы
	сравниваются методом comapreтo О из интерфейса ComparaЫe.
* Е first()
* Е last()
	Возвращают наименьший и наибольший элементы иэ отсортированного множества.
===================================
java.util.NavigableSet<E>
===================================
* Е higher (Е value)
* Е lower (Е value)
	Возвращают наименьший элемент, который больше указанного значения va.lue, или наибольший
	элемент, который меньше указанного значения va.lue, а если такой элемент не обнаружен - nустое
	значение null.
* Е ceiling (Е va.lue)
* Е floor (Е va.lue)
	Возвращают наименьший элемент, который больше или равен указанному значению va.lue, или
	наибольший элемент. который меньше или равен указанному значению va.lue, а если такой элемент
	не обнаружен - nустое значение null.
* Е pollFirst ()
* Е pollLast ()
	Удаляют и возвращают наименьший или наибольший элемент во множестве или же nустое значение
	null, если множество оказывается nустым.
* Iterator<E> descendingiterator ()
	Возвращает итератор, обходящий данное множество в обратном nорядке.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
===================================
java.util.Queue<E>
===================================
* boolean add (Е element)
* boolean offer (Е element)
	Вводят заданный элемент в конце очереди и возвращают логическое значение true, если очередь
	не заnолнена. Если же очередь заnолнена, nервый метод генерирует исключение тиnа
	IllegalStateException, тогда как второй возвращает логическое значение false.
* Е remove()
* Е poll()
	Удаляют и возвращают элемент из головы очереди, если очередь не nуста. Если же очередь nуста,
	то nервый метод генерирует исключение тиnа NoSuchElementException, тогда как второй возвращает
	nустое значение null.
* Е element()
* Е peek()
	Возвращают элемент из головы очереди, не удаляя его, если очередь не nуста. Если же очередь
	пуста, то nервый метод генерирует исключение тиnа NoSuchElementException, тогда как второй
	возвращает nустое значение null.

===================================
java.util.Deque<E>
===================================
* void addFirst(E element)
* void adc:!Las t (Е elemen t)
* boolean offerFirst (Е elemen t)
* boolean offerLast (Е element)
	Вводят заданный элемент в голове или в хвосте двухсторонней очереди. Если очередь заполнена,
	первые два метода генерируют исключение типа IllegalStateException, тогда как два последние
	возвращают логическое значение false.
* Е removeFirst ()
* Е removeLas t ()
* Е pollFirst ()
* Е pollLas t ()
	Удаляют и возвращают элемент из головы очереди, если очередь не пуста. Если же она пуста, то
	первые два метода генерируют исключение типа NoSuchElementException, тогда как последние
	два возвращают пустое значение null.
* Е getFirst()
* Е getLast()
* Е peekFirst()
* Е peekLast()
	Возвращают элемент из головы очереди, не удаляя ее, если очередь не пуста. Если же она пуста,
	первые два метода генерируют исключение типа NoSuchElementException, тогда как последние
	метода два возвращают пустое значение null.

===================================
java.util.ArrayDeque<E>
===================================
* ArrayDeque ()
* ArrayDeque (int initialCapaci ty)
	Конструируют неограниченные двунаправленные очереди с начальной емкостью 16 элементов или
	заданной начальной емкостью.

===================================
java.util.PriorityQueue
===================================
* PriorityQueue ()
* PriorityQueue(int initialCapacity)
	Конструируют очередь no nриоритету для хранения объектов тиnа ComparaЫe.
* PriorityQueue(int initialCapacity, Comparator<? super Е> с)
	Конструирует очередь no nриоритету и исnользует заданный комnаратор для сортировки ее элементов.

===================================
java.util.Мap<K, V>
===================================
* V get (Object key)
	Получает значение, связанное с ключом, а возвращает объект, связанный с ключом, или же пустое
	значение null, если ключ не найден в отображении. В реализующих классах могут быть запрещены
	пустые ключи типа null.
* default V getOrDefault(Object key, V defaultValue) 8
	Получает значение, связанное с ключом, а возвращает объект, связанный с ключом, или же указанное
	значение по умолчанию defaultValue, если ключ не найден в отображении.
* V put(K key, V value)
	Размещает в отображении связь ключа со значением. Если ключ уже присутствует, новый объект
	заменяет старый, ранее связанный с тем же самым ключом. Этот метод возвращает старое значение
	ключа или же пустое значение null, если ключ ранее отсутствовал. В реализующих классах
	могут быть запрещены пустые ключи или значения null.
* void putAll (Мар<? extends К, ? extends V> entries)
	Вводит все элементы из указанного отображения в данное отображение.
* boolean containsKey (Object key)
	Возвращает логическое значение true, если ключ присутствует в отображении.
	default void forEach(BiConsumer<? super К,? super V> action) 8
	Выполняет действие над всеми парами ''ключ-значение" в данном отображении.
***
* default V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
	Если указанный ключ key связан с непустым значением v, то данный метод применяет к значениям
	v и value заданную функцию, а затем связывает указанный ключ key с получаемым
	результатом или удаляет этот ключ, если в итоге получается пустое значение null. Возвращает
	результат вызова get (key).
* default V compute(K key, BiFunction<? super К,? super V,? extends V> remappingFunction) 
	Применяет заданную функцию к указанному ключу key или к результату вызова get (key). Связывает
	указанный ключ keyc получаемым результатом или удаляет этот ключ, если в итоге получается
	пустое значение null. Возвращает результат вызова get (key) .
* default V computeifPresent(K key, BiFunction<? super К,? super V,? extends V> remappingFunction) 
	Если указанный ключ key связан с непустым значением v, то данный метод применяет к этому
	ключу и значению v заданную функцию, а затем связывает указанный ключ key с получаемым
	результатом или удаляет этот ключ, если в итоге получается пустое значение null. Возвращает
	результат вызова get (key).
* default V computeifAЬsent(K key, Function<? super К,? extends V> mappingFиnction) 
	Применяет заданную функцию к указанному ключу key, если только этот ключ не связан с непустым
	значением. Связывает указанный ключ key с получаемым результатом или удаляет этот
	ключ, если в итоге получается пустое значение null. Возвращает результат вызова get (key).
* default V putifAЬsent(K key, V value)
	Если указанный ключ key отсутствует или связан с пустым значением null, то данный метод
	связывает его с заданным значением value и возвращает пустое значение null, а иначе - связанное 
	значение.
* default void replaceAll(BiFunction<? super К,? super V,? extends V> function) 
	Вызывает заданную функцию для всех записей в отображении. Связывает указанный ключ key
	с непустыми результатами и удаляет ключи с пустыми результатами.

* Set<Мap.Entry<K, V>> entrySet()
	Возвращает представление множества объектов типа мар. Entry, т.е. пар "ключ-значение" в отображении.
	Из этого множества можно удалять имеющиеся в нем элементы, но в него нельзя вводить
	новые элементы.
* Set<К> keySet ()
	Возвращает представление множества всех ключей в отображении. Из этого множества можно
	удалять имеющиеся в нем элементы, и в этом случае будут удалены ключи и связанные с ними
	значения, но в него нельзя вводить новые элементы.
* Collection<V> values ()
	Возвращает представление множества всех значений в отображении. Из этого множества можно
	удалять имеющиеся в нем элементы, и в этом случае будут удалены значения и связанные с ними
	ключи, но в него нельзя вводить новые элементы.
===================================
java. util .Мар. Entry<K, V>
===================================
* К qetкey()
* V qetValue ()
	Возвращают ключ или значение из данного элемента отображения.
* V setValue (V newValue)
	Заменяет прежнее значение новым в связанном с ним отображении и возвращает прежнее значение.
===================================
java.util.HashМap<K, V>
===================================
* HashМap()
* HashМap (int ini tialCapaci ty)
* HashМap (int ini tialCapaci ty, float loadFactor)
	Конструируют пустое хеш-отображение указанной емкости и с заданным коэффициентом загрузки
	(числовым значением в пределах от О, О до 1, О, определяющим процент заполнения хеш-таблицы,
	по достижении которого происходит повторное хеширование). Коэффициент загрузки по умолчанию
	равен О. 75.
===================================
java.util .ТrееМар<К, V>
===================================
* ТrееМар()
	Конструирует древовидное отображение по ключам, относящимся к типу, реализующему интерфейс
	Comparable.
* ТrееМар (Comparator<? super К> с)
	Конструирует древовидное отображение, используя указанный компаратор для сортировки ключей.
* ТrееМар (мар<? extends К, ? extends V> entries)
	Конструирует древовидное отображение и вводит все элементы из указанного отображения.
* TreeМap(SortedМap<? extends К, ? extends V> entries)
	Конструирует древовидное отображение и вводит все элементы из отсортированного отображения,
	используя тот же самый компаратор элементов, что и для отсортированного отображения.
===================================
java.util.SortedМap<K, V>
===================================
* Comparator<? super К> comparator()
	Возвращает компаратор, используемый для сортировки ключей, или пустое значение null, если
	ключи сравниваются методом compareтo () из интерфейса ComparaЫe.
* k firstKey ()
* k lastкey()
	Возвращают наименьший и наибольший ключи в отображении.

===================================
java.util.WeakHashМap<K, V>
===================================
* WeakHashМap О
* WeakHashМap(int initiaicapacity)
* WeakHashМap(int initiaicapacity, float ioadFactor)
	Конструируют пустое хеш-отображение заданной емкости с указанным коэффициентом загрузки.
===================================
java.util.LinkedНashSet<E>
===================================
* LinkedНashSet()
* LinkedНashSet(int initiaicapacity)
* LinkedНashSet(int initiaicapacity, float ioadFactor)
	Конструируют пустое связное хеш-множество заданной емкости с указанным коэффициентом загрузки.
===================================
java.util.LinkedНashМap<К, V>
===================================
* LinkedНashМap ()
* LinkedНashМap(int initialcapacity)
* LinkedНashМap(int initialcapacity, float loadFactor)
* LinkedНashМap(int initialCapacity, float loadFactor, boolean accessOrder)
	Конструируют пустое связное хеш·отображение заданной емкости с указанным коэффициентом
	загрузки и упорядочением. Логическое значение true параметра accessOrder задает порядок
	доступа, а его логическое значение false - порядок ввода.
* protected Ьoolean removeEldestEntry(Nap.Entry<K, V> eldest)
	Этот метод должен быть переопределен, чтобы возвращать логическое значение true, если требуется
	удалить самый старый элемент. Параметр eldest обозначает самый старый элемент, который
	предполагается удалить. Данный метод вызывается после того, как в отображение введен
	элемент. В его реализации по умолчанию возвращается логическое значение false, т.е. старые
	элементы по умолчанию не удаляются. Но этот метод можно переопределить для выборочного возврата
	логического значения true, если, например, самый старый элемент удовлетворяет определенным
	условиям или размеры отображения достигают определенной величины.
===================================
java.util.EnumSet<E extends Enwn<E>>
===================================
* static <Е extends Enum<E>> EnumSet<E> allOf (Class<E> enuш7:ype)
	Возвращает множество, содержащее все значения заданного перечислимого типа.
* static <Е extends Enum<E>> EnumSet<E> noneOf (Class<E> enum7:ype)
	Возвращает пустое множество, способное хранить значения заданного перечислимого типа.
* static <Е extends Enum<E>> EnumSet<E> ranqe (Е from., Е to)
	Возвращает множество, содержащее все значения от fromдo to включительно.
* static <Е extends Enum<E>> EnumSet<E> of (Е value)
* static <Е extends Enum<E>> EnumSet<E> of (Е value, Е. . . values)
	Возвращают множество, содержащее заданные значения.
===================================
java.util.EnumМap<К extends Enum<К>, V>
===================================
* EnumМap (Class<К> key7:ype)
	Конструирует пустое отображение с ключами заданного типа.
===================================
java.util.IdentityHashМap<К, V>
===================================
* Iden ti tyHashМap()
* IdentityHashМap(int expectedМaxSize)
	Конструируют пустое хеш-отображение идентичности, емкость которого равна минимальной степени
	2, превышающей величину 1. 5 х expectedМaxSize !по умолчанию значение параметра
	expectedМaxSize равно 21).
===================================
java.lang.System
===================================
* static int identi tyHashCode (Object obj)
	Возвращает хеш-код, вычисляемый методом Object. hashCode (), исходя из адреса памяти,
	по которому хранится объект, даже если в классе, к которому относится заданный объект obj,
	переопределяется метод hashCode () .
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
===================================
java.util.Collections			Класс
===================================
* static <Т extends ComparaЫe<? super Т>> void sort (List<T> e.lements)
	Сортируют элементы в списке, используя алгоритм устойчивой сортировки. Выполнение алгоритма
	гарантируется за время Oln log nl, где п - длина списка.
* static void shuffle(List<?> e.lements)
* static void shuffle (List<?> e.lemen ts, Random r)
	Случайно перетасовывают элементы в списке. Этот алгоритм выполняется эа время Oln ainll.
	где п - длина списка, тогда как ain) - среднее время доступа к элементу списка.
* static <Т extends ComparaЫe<? super Т>> int binarySearch(List<T> elements, T key)
* static <Т> int binarySearch(List<T> elements, Т key, Comparator<? super Т> с)
	Осуществляют поиск по указанному ключу kеу в отсортированном списке, используя линейный поиск,
	если заданный объект e.lements расширяет класс AЬstractSequentialList, а иначе - двоичный
	поиск. Выполнение алгоритма поиска гарантируется за время О!а!пl log пl, где п - длина списка,
	тогда как alnl - среднее время доступа к элементу. Возвращают индекс указанного ключа key в списке
	или отрицательное значение i, если ключ не найден в списке. В таком случае указанный ключ key
	должен быть введен на позиции с индексом -i-1, чтобы список остался отсортированным.

* static <Т extends Comparable<? super Т>> т min (Collection<T> elements)
* static <Т extends ComparaЫe<? super Т>> Т шах (Collection<T> elements)
* static <Т> min (Collection<T> elements, Comparator<? super Т> с)
* static <Т> max(Collection<T> elements, Comparator<? super Т> с)
	Возвращают наименьший или наибольший элемент из коллекции !границы параметров упрощены
	для ясности).
* static <Т> void сору (List<? super Т> to, List<T> fram)
	Копирует все элементы из исходного списка на те же позиции целевого списка. Целевой список
	должен быть не короче исходного.
* static <Т> void fill (List<? super Т> 1, Т value)
	Устанавливает на всех позициях списка одно и то же значение.
* static <Т> boolean addAll (Collection<? super Т> с, т... values) 
	Вводит все значения в заданную коллекцию и возвращает логическое значение true, если в результате
	этого коллекция изменилась.

* static <Т> Enumeration<T> enumeration(Collection<T> с)
	Возвращает перечисление элементов из заданной коллекции с.
* public static <Т> ArrayList<T> list(Enumeration<T> е)
	Возвращает списочный массив, содержащий элементы из заданного перечисления е.

===================================
java.util.Collection<T>			Класс
===================================
* default boolean removeif (Predicate<? super Е> filter)
Удаляет из коллекции все совnавшие элементы.


===================================
java. util. List<E>
===================================
* default void sort (Comparator<? super Т> comparator) 8
	Сортирует данный список, используя указанный компаратор.

* default void replaceAll (UnaryOperator<E> ор) 
Выnолняет указанную оnерацию над всеми элементами данного сnиска.

===================================
ava.util.Comparator<T>
===================================
* static <Т extends Comparable<? super Т>> Comparator<T> reverseOrder() 8
	Выдает компаратор, обращающий порядок, обеспечиваемый интерфейсом ComparaЬle.
* default Comparator<T> reversed() 8
	Выдает компаратор, обращающий порядок, обеспечиваемый данным компаратором.

===================================
java. util. List<E>
===================================
* boolean hasМoreElements()
	Возвращает логическое значение true, если в коллекции еще остались элементы для просмотра.
* Е nextEleшent ()
	Возвращает следующий элемент для просмотра. Этот метод не следует вызывать, если метод
* hasMoreElements О возвратит логическое значение false.
* default Iterator<E> asiterator () 9
	Выдает итератор для обхода перечисляемых элементов в коллекции.
===================================
java.util.Properties
===================================
* Properties ()
	Создает пустую таблицу свойств.
* Properties (Properties defaults)
	Создает пустую таблицу свойств с рядом установок по умолчанию.
* Strinq qetProperty (Strinq key)
	Получает связь со свойством. Возвращает символьную строку, связанную с ключом. или аналогичную
	строку из таблицы установок по умолчанию, если ключ отсутствует в текущей таблице.
* Strinq qetProperty(Strinq key, Strinq defaultValue)
	Получает свойство со значением по умолчанию, если ключ не найден. Возвращает символьную
	строку, связанную с ключом, или символьную строку по умолчанию, если ключ отсутствует в текущей
	таблице.
* void load(InputStream in)
	Загружает таблицу свойств из потока ввода Inputstream.
* Object setProperty(Strinq key, Strinq value)
	Устанавливает свойство. Возвращает установленное ранее значение по заданному ключу.
* void store (OutputStream out, Strinq conпnentstring) 1. 2
	Выводит таблицу свойств в поток вывода OutputStream.
===================================
java.lang.System
===================================
* Properties qetProperties ()
	Извлекает все системные свойства. У прикладной программы должно быть разрешение на извлечение
	всех свойств, а иначе генерируется исключение в связи с нарушением безопасности.
* String getProperty (String key)
	Извлекает системное свойство по заданному имени ключа. У прикладной программы должно быть
	разрешение на извлечение данного свойства, а иначе генерируется исключение в связи с нарушением
	безопасности. Данным методом всегда извлекаются следующие свойства:
java.version
java.vendor
java.vendor.url
java.home
java.class.path
java.library.path
java.class.version
os.name
os.version
os.arch
file.separator
path.separator
line.separator
java.io.tempdir
user.name
user.home
user.dir
java.compiler
java.specification.version
java.specification.vendor
java.specification.name
java.vm.specification.version
java.vm.specification.vendor
java.vm.specification.name
java.vm.version
java.vm.vendor
java.vm.name

===================================
java.util.Stack<E>
===================================
* Е push (Е i tem)
	Помещает заданный элемент item в стек и возвращает его.
* Е рор()
	Извлекает и возвращает элемент из вершины стека. Этот метод не следует вызывать, если стек пуст.
* Е peek ()
	Возвращает элемент, находящийся на вершине стека, не извлекая его. Этот метод не следует вызывать,
	если стек пуст.
===================================
java.util.BitSet
===================================
* BitSet (int ini tialCapaci ty)
	Конструирует битовое множество.
* int length ()
	Возвращает ··логическую длину" битового множества: 1 + индекс самого старшего установленного бита.
* boolean get(int bit)
	Получает бит.
* void set(int bit)
	Устанавливает бит.
* void clear (int Ьit)
	Сбрасывает бит.
* void and (BitSet set)
	Выполняет логическую операцию И над данным и другим битовым множеством.
* void or (BitSet set)
	Выполняет логическую операцию ИЛИ над данным и другим битовым множеством.
* void xor (BitSet set)
	Выполняет логическую операцию исключающее ИЛИ над данным и другим битовым множеством.
* void andNot (BitSet set)
	Сбрасывает все биты данного битового множества, установленные в другом битовом множестве.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

