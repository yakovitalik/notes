*******************************************************************************
				SWING
*******************************************************************************
=======================================
Общее
=======================================
Создание экранной кнопки:
var yellowButton = new JButton("Yellow"J;
var blueButton = new JButton(new ImageIcon("blue-ball.gif"));

Затем вызывается метод add(), чтобы добавить экранные кнопки на панели:

var yellowButton = new JButton("Yellow");
var blueButton = new JButton("Blue");
var redButton = new JButton("Red");

buttonPanel.add(yellowButton);
buttonPanel.add(blueButton);
buttonPanel.add(redButton);
+++++++++++++++++++++++++++++++++++++++


***************************************
=======================================
	КЛАСС JFRAME
=======================================
Методы:

setLocation()		setLocation(x, y)		Устанавливающие положение фрейма
setBounds()		setBounds(x, у, width, height)	Изменение размера и расположения компонента

dispose()		Закрывает окно и освобождает все системные ресурсы, выделенные 
			при его создании
setIconImage()		Сообщает оконной системе, какая пиктограмма должна отображаться в 
			стоке заголовка, окне переключателя задач, и т.д.
setTitle()		Позволяет изменить текст в строке заголовка
setResizable()		Получающий в качестве параметра логическое значение и определяющий, 
			имеет ли пользователь право изменять размеры фрейма

***************************************
=======================================
	КЛАСС WINDOW
=======================================
show()			Служит для отображения фрейма на экране

=======================================
	КЛАСС TOOLKIT	Содержит методы для работы с оконной системой конкретной платформы
=======================================
getDefaultToolkit()		Выяснет размер экрана в виде объекта типа Toolkit

getScreenSize ()		Возвращает размеры экрана в виде объекта типа Dimension
Этот объект содержит ширину и высоrу в открытых (!)переменных width и height соответственно.

Например:			// устанавливает размер экрана в долях(%)
Toolkit kit = Toolkit.getDefaultToolkit();
Dimension screenSize = kit.getScreenSize();
int screenWidth = screenSize.width;
int screenHeight = screenSize.height;
setSize(screenWidth / 2, screenHeight / 2);

Кроме того, для фрейма можно предоставить пиктоrрамму:

Image img = new Imageicon("icon.gif").getimage();
seticonimage(img);
***************************************
Любые компоненты, вводимые во фрейм,
автоматически располагаются на панели содержимого:
Component с= .. . ,
frame.add(c); / / вводится на панели содержимого

*******************************************************************************
				КЛАССЫ
*******************************************************************************
========================
java.awt.Component
========================
* boolean isVisible()
* void setVisible(boolean b)
	Получают или устанавливают свойство видимости visibe. Компоненты являются видимыми изначально,
	кроме компонентов верхнего уровня типа JFrame.
* void setSize (int width, int height)
	Устанавливает текущую ширину и высоту компонента.
* void setLocation(int х, int у)
	Перемещает компонент в новую точку. Если компонент не относится к верхнему уровню, то его координаты
	х и у отсчитываются относительно контейнера, а иначе используется экранная система
	координат (например, для объектов типа JFrame).
* void setвounds (int х, int у, int width, int height)
	Перемещает текущий компонент и изменяет его размеры. Расположение левого верхнего угла задают
	параметры х и у, а новый размер - параметры width и height.
* Dimension qetSize()
* void setSize (Dimension d)
	Получают или устанавливают свойство size, задающее размеры текущего компонента.
++++++++++++++++++++++++
========================
java.awt.Window
========================
* void setLocationВyPlatform (boolean b)
	Получают или устанавливают свойство locationByPlatform. Если зто свойство установлено
	до того. как отобразилось данное окно, то подходящее расположение выбирает платформа.
++++++++++++++++++++++++
========================
java.awt.Frame
========================
* boolean isResizable ()
* void setResizable(boolean b)
	Получают или устанавливают свойство resizable. Если это свойство установлено, то пользователь
	может изменять размеры фрейма.
* String getTitle ()
* void setTitle (String s)
	Получают или устанавливают свойство title. определяющее текст в строке заголовка фрейма.
* Image geticonimage ()
* void seticonimage (Image image)
	Получают или устанавливают свойство iconimage, определяющее пиктограмму фрейма. Оконная
	система может отображать пиктограмму как часть оформления фрейма или в каком-нибудь другом
	месте.
++++++++++++++++++++++++
========================
java.awt.Toolkit
========================
* static Toolkit qetDefaultToolkit()
	Возвращает объект типа Toolkit, т.е. выбираемый по умолчанию набор инструментов.
* Dimension qetScreenSize()
	Получает размеры пользовательского экрана.
++++++++++++++++++++++++
========================
java.awt.Graphics
========================
* boolean drawimage(Imaqe img, int х, int у, ImageObserver observer)
* boolean drawimage (Image img, int х, int у, int ridth,
		int height, ImageObserver aЬserver)
	Выводят немасштабированное изображение. Примечание: эти методы могут возвратить уnравление
	до того, как изображение будет выведено nолностью. Объект типа ImageObserver уведомляется
	о nроцессе воспроизведения. Это приносило пользу в далеком прошлом, теперь достаточно nередать
	наблюдателю пустое значение null.
========================
javax.swing.Imageicon
========================
* Imaqelcon(Strinq имя_файла)
	Конструирует пиктограмму, изображение которой хранится в файле.
* Imaqe qetImage()
	Получает изображение данной пиктограммы.
++++++++++++++++++++++++
========================
javax.swing.JFrame
========================
* Component add (Component с)
	Возвращает указанный комnонент для ввода на nанели содержимого данного фрейма.
++++++++++++++++++++++++

========================
java.awt.Component
========================
* void repaint()
	Вызывает nерерисовку комnонента. Перерисовка выnолняется сразу же nосле того, как возникнут
	условия, nозволяющие это сделать.
* Dimension getPreferredSize()
	Этот метод nереоnределяется для возврата nредnочтительных размеров данного комnонента.
++++++++++++++++++++++++
========================
java.awt.Window
========================
* void pack ()
	Изменяет размеры данного окна, nринимая во внимание nредnочтительные размеры его комnонентов.

++++++++++++++++++++++++
========================
java.awt.geom.RectangularShape
========================
* double getCenterX ()
* double getCenterY ()
* double getltinX()
* double getltinY ()
* double getнa.xX()
* double getмaxY()
	Возвращают координаты центра, наименьшую и наибольшую координату х и у описанного прямоугольника.
* double qetWidth ()
* double qetнeiqht ()
	Возвращают ширину и высоту оnисанного nрямоугольника.
* double qetx ()
* double qetY ()
	Возвращают координаты х и у левого верхнего угла оnисанного nрямоугольника.

++++++++++++++++++++++++
========================
java.awt.geom.Rectangle2D.Double
========================
* Rectanqle2D.DouЬle(double х, double у, double w, double h)
Строит nрямоугольник no заданным координатам верхнего левого угла, ширине и высоте.
++++++++++++++++++++++++
========================
java.awt.geom.Ellipse2D.Double
========================
* Ellipse2D.Double(double х, double у, double w, double h)
	Строит эллиnс с ограничивающим nрямоугольником no заданным координатам верхнего левого
	угла, ширине и высоте.

++++++++++++++++++++++++
========================
java.awt.geom.Point2D.Double
========================
* Point2D. DouЬle (double х, double у)
	Рисует точку no заданным координатам.

++++++++++++++++++++++++
========================
java.awt.geom.Line2D.Double
========================
* Line2D.DouЬle(Point2D start, Point2D end)
* Line2D.DouЬle(douЬle startx, douЬle startY, douЬle endX, douЬle endY)
	Рисует линию no заданным координатам начальной и конечной точек.

++++++++++++++++++++++++
========================
java.awt.Color
========================
* Color(int r, int g, int b)
Создает объект цвета с заданными значениями красной, зеленой и синей составляющих в пределах
от О до 255.

++++++++++++++++++++++++
========================
java.awt.Graphics2D
========================
* Paint qetPaint ()
* void setPaint(Paint р)
	Получают или устанавливают атрибуты рисования для данного графического контекста. Класс
	Color реализует интерфейс Paint. Этот метод можно использовать для задания сплошного цвета
	при рисовании.
* void fill (Shape s)
	Заполняет текущую нарисованную форму.

* FontRenderContext getFontRenderContext()
	Получает контекст восnроизведения, в котором задаются характеристики шрифта для текущего
	графического контекста.
* void drawString(String str, float х, float у)
	Выводит текстовую строку, выделенную текущим шрифтом и цветом.
++++++++++++++++++++++++
========================
java.awt.Component
========================
* Color getвackground()
* void setBackqround(Color с)
* Color getForeqround()
* void setForeground(Color с)
Получают или устанавливают цвет переднего и заднего плана.
++++++++++++++++++++++++
========================
java.awt.Font
========================
* Font(String na.me, int style, int size)
	Создает новый объект тиnа Font для оnисания шрифта.
* String getFontName ()
	Возвращает название начертания шрифта \наnример, Helvetica Boldl.
* String getFamily ()
	Возвращает название гарнитуры шрифта \наnример, Helvetical.
* String getName ()
	Возвращает логическое название шрифта \наnример, SansSerif), если оно nрисвоено шрифту
	nри его создании, а иначе - название начертания шрифта.
* Rectangle2D getStringBounds (String s, FontRenderContext context) 
	Возвращает nрямоугольник, ограничивающий данную строку. Координата уnрямоугольника отсчитывается
	от базовой линии. Координата у верхней части nрямоугольника равна отрицательному
	nодъему. Высота nрямоугольника равна сумме nодъема, сnуска и интерлиньяжа. Ширина nрямоугольника
	равна ширине строки.
* LineМetrics getLineМetrics (String s, FontRenderContext context) 
	Возвращает объект тиnа LineМetrics, оnисывающий тиnографские характеристики текстовой
	строки, чтобы оnределить ее nротяженность.
* Font deriveFont (int style) 
* Font deriveFont (float size)
* Font deriveFont (int style, float size)
	Возвращают новый объект тиnа Font для оnисания шрифта, совnадающего с текущим шрифтом,
	за исключением размера и стиля, задаваемых в качестве nараметров.
++++++++++++++++++++++++
========================
java.awt.font.LineМetrics
========================
* float getAscent()
	Получает nодъем шрифта - расстояние от базовой линии до верхушек nроnисных букв.
* float getDescent()
	Получает сnуск - расстояние от базовой линии до nодстрочных элементов букв.
* float getLeading ()
	Получает интерлиньяж - расстояние от нижнего края nредыдущей строки до верхнего края следующей
	строки.
* float getHeight()
	Получает общую высоту шрифта - расстояние между двумя базовыми линиями текста, равное сумме
	сnуска, интерлиньяжа и nодъема.
++++++++++++++++++++++++
========================
javax.swing.JComponent
========================
* Fontмetrics getFontмetrics (Font .f) 5
	Получает типографские характеристики заданного шрифта. Класс Fontмetrics является предшественником
	класса LineМetrics.

========================
java.awt.Font.Мetrics
========================
* FontRenderContext getFontRenderContext () 1. 2
	Получает контекст воспроизведения для шрифта.

++++++++++++++++++++++++
========================
javax.swing.JВutton
========================
* JВutton (String label)
* JВutton (Icon icon)
* JВutton (String label, Icon icon)
	Создают экранную кнопку. Символьная строка, передаваемая в качестве параметра, может содержать
	текст или НТМL-разметку, например, <НТМL><В>Оk</В></НТМL>.
++++++++++++++++++++++++
========================
java.awt.Container
========================
* Component add (Component с)
	Добавляет заданный компонент с в контейнер.
++++++++++++++++++++++++
========================
java.awt.event.WindowListener
========================
* void windoWOpened (WindowEvent е)
	Вызывается nосле открытия окна.
* void windowClosing (WindowEvent е)
	Вызывается, когда nользователь выдает дисnетчеру окон команду закрыть окно. Следует, однако,
	иметь в виду, что окно закроется только в том случае, если для него будет вызван метод hide О
	или dispose О .
* void windowClosed(WindowEvent е)
	Вызывается nосле закрытия окна.
* void windowlconified (WindowEvent е)
	Вызывается nосле свертывания окна.
* void windowDeiconified(WindowEvent е)
	Вызывается nосле развертывания окна.
* void windowActivated(WindowEvent е)
	Вызывается nосле активизации окна. Активным может быть только фрейм или диалоговое окно.
	Обычно дисnетчер окон сnециально выделяет активное окно, наnример, nодсвечивает его заголовок.
* void windowDeactivated(WindowEvent е)
	Вызывается nосле того, как окно становится неактивным.
++++++++++++++++++++++++
========================
java.awt.event.WindowStateListener
========================
* void windowStateChanged(WindowEvent event)
	Вызывается nосле того, как окно было nолностью развернуто, свернуто или восстановлено до нормальных
	размеров.
++++++++++++++++++++++++
===================================
ТАБЛИЦА ПРЕДОПРЕДЕЛЕННЫХ ДЕЙСТВИЙ
===================================

Имя				Значение
NАМЕ				Имя действия. Отображается на экранной кнопке и в названии пункта меню
SМALL ICON			Место для хранения пиктограммы, которая отображается на экранной кнопке,
				в пункте меню или на панели инструментов
SHORT DESCRIPTION 		Краткое описание пиктограммы, отображаемое во всплывающей подсказке
LONG DESCRIPTION 		Подробное описание пиктограммы. Может использоваться для подсказки. Не
				применяется ни в одном из компонентов библиотеки Swiпg
МNEМONIC КЕУ 			Мнемоническое сокращение. Отображается в пункте меню
ACCELERATOR КЕУ 		Место для хранения комбинации клавиш. Не применяется ни в одном из
				компонентов библиотеки Swing
ACTION СОМНАND КЕУ 		Применялось раньше в устаревшем теперь методе
				registeredКeyBoardAction()
DEFAULT 			Может быть полезным для хранения разнообразных объектов. Не применяется
				ни в одном из компонентов библиотеки Swing
===================================
===================================
Условия для привязки ввода
===================================
Условие					Вызываемое действие

WНEN FOCUSED				Когда данный компонент находится в фокусе ввода
					с клавиатуры
WНEN ANCESTOR OF FOCUSED СОМРNЕNТ	Когда данный компонент содержит другой компонент,
					находящийся в фокусе ввода с клавиатуры
WНEN IN FOCUSED WINDOW			Когда данный компонент содержится в том же окне, что
					и компонент, находящийся в фокусе ввода с клавиатуры	

/////////////////////////////////////////////////////


========================
javax.swing.Action
========================
* boolean isEnabled ()
* void setEnabled (boolean b)
	Получают или устанавливают свойство enaЬled объекта данного действия.
* void putValue (String key, Object value)
	Размещает пару "имя-значение" в объекте действия.
* Object getValue (String key)
	Возвращает значение из сохраненной пары "имя-значение".
++++++++++++++++++++++++
========================
javax.swing.KeyStroke
========================
* static KeyStroke getKeyStroke (String description)
	Конструирует объект типа KeyStroke из удобочитаемого описания !последовательности символьных
	строк, разделяемых пробелами). Описание начинается с нулевого или большего количества
	модификаторов !shift, control, ctrl, meta, alt, altGraf) и оканчивается строкой со словом
	typed и последующим символом !например, "typed а") или необязательным спецификатором
	события (по умолчанию - pressed или released) и последующим кодом клавиши. Код клавиши,
	снабженный префиксом vк .должен соответствовать константе KeyEvent; например, код
	клавиши <INSERT > соответствует константе KeyEvent. VК_ INSERT.
++++++++++++++++++++++++
========================
javax.swing.JComponent
========================
* ActionМap getActionМap()
	Возвращает привязку действия. связывающую назначенные клавиши действий, которые могут
	быть произвольными объектами, с объектами класса, реализующего интерфейс Action.
* Inputмap getinputмap (int flag)
	Получает привязку ввода, связывающую нажатия клавиш с клавишами действий. В качестве параметра
	flag указывается одно из условий привязки, перечисленных в табл.
++++++++++++++++++++++++
========================
java.awt.event.MouseEvent
========================
* int getx()
* int getY()
* Point getPoint()
	Возвращают горизонтальную lxl и вертикальную lyl координаты или точку, в которой настуnило
	событие. Отсчет nроизводится от левого верхнего угла комnонента, являющегося источником события.
* int getClickCount()
	Возвращает количество nоследовательных щелчков кноnкой мыши, связанных с данным событием.
	(Промежуток времени, в nределах которого nодсчитываются щелчки, зависит от оnерационной системы.)
++++++++++++++++++++++++
========================
java.awt.Component
========================
* public void setCursor (Cursor cursor)
	Изменяет внешний вид курсора.

++++++++++++++++++++++++
========================
java.util.prefs.Preferences
========================
* Preferences userRoot()
	Возвращает корневой узел из дерева глобальных nараметров настройки для nользователя вызывающей
	nрограммы.
* Preferences systemRoot()
	Возвращает системный корневой узел из дерева глобальных nараметров настройки.
* Preferences node (String path)
	Возвращает узел, достуnный из текущего узла no заданному nути. Если в качестве nараметра
	path указан абсолютный nуть, который обычно начинается со знака косой черты l/J, то узел достуnен
	из корня дерева глобальных nараметров настройки. Если же узел отсутствует no заданному
	nути, он создается.
* Preferences userNodeForPackage(Class cl)
* Preferences systemNodeForPackage(Class cl)
	Возвращают узел из дерева текущего nользователя или системного дерева. абсолютный nуть к которому
	соответствует имени nакета, содержащего заданный класс cl.
* String[] keys()
	Возвращает все ключи, nринадлежащие данному узлу.
* String get (String key, String defval)
* int getint (String key, int defval)
* long getLong (String key, long defval)
* float getFloat(String key, float defval)
* double getDouble(String key, douЫe defval)
* boolean getвoolean (String key, boolean defval)
* bуtе[] getвyteArray(String key, byte[] defval)
	Возвращают значение, связанное с заданным ключом. Если значение отсутствует в хранилище
	глобальных параметров настройки, имеет неверный тиn или же само хранилище недостуnно, возвращается
	значение, nредусмотренное no умолчанию.
* void put(Strinq key, Strinq va.lue)
* void putint (Strinq key, int va.lue)
* void putLonq(Strinq key, lonq va.lue)
* void putFloat (Strinq key, float va.lue)
* void putDouЫe (Strinq key, douЫe va.lue)
* void putвoolean (Strinq key, boolean va.lue)
* void putвyteArray(Strinq key, byte[] va.lue)
	Сохраняют пару "ключ-значение" в заданном узле дерева.
* void exportSubtree (OutputStream out)
	Выводит в указанный поток глобальные параметры настройки, хранящиеся в заданном узле и производных
	от него узлах.
* void exportNode (OutputStream out)
	Направляет в указанный поток вывода глобальные параметры настройки, хранящиеся в заданном
	узле, игнорируя производные от него узлы.
* void iшportPreferences(InputStream in)
	Импортирует параметры глобальных настроек из указанного потока ввода.
