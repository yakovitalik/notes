
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.String
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* char charAt(int index)
	Возвращает символ, расположенный на указанной позиции. Вызвать
	этот метод следует только в том случае, если вас интересуют 
	низкоуровневые кодовые единицы.
* int codePointAt(int index)
	Возвращает кодовую точку, начало и конец которой расположены 
	на указанной позиции
* int offsetByCodePoints(int startIndex, int cpCount)
	Вовзвращает индекс кодовой точки, которая отстоит на количество 
	cpCount кодовых точек от исходной кодовой точки на позиции 
	startIndex
* int compareTo(String other)
	Возвращает отрицательное значение, если данная строка 
	лексографически предшествует строке other, положительное значение, 
	если строка other предшествует данной строке, нулевое значение - 
	если строки одинаковы.
* IntStream codePoints()
	Возвращает кодовые точки из данной символьной строки в виде потока
	данных. Для их размещения в массиве следует вызвать метод toArray().
* new String(int[] codePoints, int offset, int count)
	Создает символьную строку из количества count кодовых точек в заданном
	массиве, начинаяя с указанной позиции offset
* boolean isEmpty()
* boolean isBlank() 
	Возвращает логическое значение true, если символьная строка пуста или 
	состоит из пробелов.
* boolean equals (Object other)
	Возвращает логическое значение true, если данная строка совпадает с указанной строкой
	other.
* boolean equalsiqnoreCase(Strinq other)
	Возвращает логическое значение true, если данная строка совпадает с указанной строкой other
	без учета регистра букв.
* boolean startsWi th ( Strinq prefix)
* boolean endsWith(Strinq suffix)
	Возвращают логическое значение true, если данная строка начинается указанной подстрокой
	prefix или оканчивается указанной подстрокой suffix.
* int indexOf (Strinq str)
* int indexOf(Strinq str, int fromIndex)
* int indexOf (int cр)
* int indexOf(int cр, int fromindex)
	Возвращают индекс начала первой подстроки, совпадающей с указанной подстрокой str, или же
	индекс заданной кодовой точки ер. Отсчет начинается с позиции О или fromindex. Если указанная
	подстрока str отсутствует в данной строке, возвращается значение, равное -1.
* int lastindexOf(String str)
* int lastindexOf(String str, int fromindex)
* int lastindexOf(int ер)
* int lastindexOf(int ер, int fromindex)
	Возвращают начало последней подстроки, равной указанной подстроке str, или же индекс заданной
	кодовой точки ер. Отсчет начинается с конца строки или с позиции fromindex. Если
	указанная подстрока str отсутствует в данной строке, возвращается значение, равное -1.
* int length ()
	Возвращает длину строки.
* int codePoin tCoun t ( int startIndex, int endIndex) 
	Возвращает количество кодовых точек между позициями startindex и endindex - 1. Неспаренные
	суррогаты считаются кодовыми точками.
* String replace (CharSequence oldString, CharSequence newString)
	Возвращает новую строку, которая получается путем замены всех подстрок, совпадающих с указанной
	подстрокой ol.dString, заданной строкой newString. В качестве параметров типа
	CharSequence могут быть указаны объекты типа String или StringBuilder.
* String substring (int beginIndex)
* String substring(int beginIndex, int endIndex)
	Возвращают новую строку, состоящую из всех кодовых единиц, начиная с позиции beginindex
	и до конца строки или позиции endindex - 1.
* String toLowerCase ()
* toUpperCase ()
	Возвращают новую строку, состоящую из всех символов исходной строки. Исходная строка отличается
	от результирующей тем, что все буквы преобразуются в строчные или прописные.
* String trim ()
* String strip ()
	Возвращают новую строку, из которой исключены все начальные и конечные символы, код которых
	меньше или равен U+0020 !метод trim () !, или же пробелы \метод strip () !, имеющиеся
	в исходной строке.
* String join(CharSequence del.imiter, CharSequence ... el.ements) 8
	Возвращает новую строку, все элементы которой соединяются через заданный разделитель.
* String repeat (int count) 
	Возвращает символьную строку, повторяющую исходную строку столько раз, сколько задается с помощью
	параметра count.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.StringBuilder
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* StringВuilder()
	Конструирует пустой объект построителя символьных строк.
* int length ()
	Возвращает количество кодовых единиц из объекта nостроителя символьных строк или буфера.
* StringВUilder append (String str)
	Добавляет строку и возвращает ссылку this на текущий объект nостроителя символьных строк.
* StringBuilder append (char с)
	Добавляет кодовую единицу и возвращает ссылку this на текущий объект построителя символьных
	строк.
* StringBuilder appendCodePoint (int cр)
	Добавляет кодовую точку, преобразуя ее в одну или две кодовые единицы, возвращает ссылку
	this на текущий объект построителя символьных строк.
* void setCharAt (int i, int с)
	Устанавливает символ с на позиции i-й кодовой единицы.
* StringBuilder insert (int offset, String str)
	Вставляет строку на позиции offset и возвращает ссылку this на текущий объект построителя
	символьных строк.
* StringВUilder insert (int offset, char с)
	Вставляет кодовую единицу на позиции offset и возвращает ссылку this на текущий объект
	nостроителя символьных строк.
* StringВUilder delete (int startindex, int endindex)
	Удаляет кодовые единицы со смещениями от startindex до endindex - 1 и возвращает
	ссылку this на текущий объект nостроителя символьных строк.
* String toString ()
	Вставляет строку, содержащую те же данные, что и объект nостроителя символьных строк или буфер.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.Scanner
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Scanner(InputStream in)
	Конструирует объект типа Scanner на основе заданного потока ввода.
* Strinq nextLine()
	Читает очередную строку.
* String next ()
	Читает очередное вводимое слово, отделяемое пробелами.
* int nextInt ()
* double nextDouble ()
	Читают очередную последовательность символов, представляющую целое число или число с плавающей
	точкой, выполняя соответствующее преобразование.
* boolean hasNext ()
	Проверяет, присутствует ли еще одно слово в потоке ввода.
* boolean hasNextInt()
* boolean hasNextDouble ()
	Проверяют, присутствует ли в потоке ввода последовательность символов, представляющая целое
	число или число с плавающей точкой.

* Scanner (Path p, String encoding)
	Конструирует объект типа Scanner, который читает данные из
	файла по указанному пути, используя заданную кодировку символов.

* Scanner (String data)
	Конструирует объект типа Scanner, который читает данные из 
	указанной символьной строки

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.System
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static Console console()
	Возвращает объект типа Console для взаимодействия с пользователем через консольное окно,
	а если такое взаимодействие невозможно - пустое значение null. Объект типа Console доступен
	в любой программе, запущенной в консольном окне. В противном случае его доступность
	зависит от конкретной системы.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.io.Console
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static char[] readPassword(String prampt, Object ... args)
* static String readLine(String prompt, Object ... args)
	Отображают приглашение и читают вводимые пользователем данные до тех пор, пока не получают
	конец вводимой строки. Параметры args могут быть использованы для предоставления аргументов
	форматирования, как поясняется в следующем разделе.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Comparable<T>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* int compareтo (Т other)
	Сравнивает текущий объект с заданным объектом other и возвращает отрицательное целое значение,
	если текущий объект меньше, чем объект other; нулевое значение, если объекты равны;
	а иначе - положительное целое значение.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.io.PrintWriter
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* PrintWriter (String fileName)
	Конструирует объект типа PrintWriter для ввода данных из файла по
	указанному пути


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.nio.file.Paths
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static Path get(String pathName)
	Конструирует объект типа Path для ввода данных из файла по
	указанному пути

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.Arrays
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static type copyOf(xxx[] a, int length);
* static type copyOf(xxx[] a, int srart, int end);
	Возвращают массив такого же типа, что и заданный массив a, 
	длинной length или end - start, и заполнененый значениями из
	массива a. Если значение параметра end оказывается меньше значения свойства 
	a.length, то получаемый результат заполняется нулевыми значениями или 
	же логическими значениями false.
* static void sort(xxx[] a)
	Сортирует массив, используя алгоритм быстрой сортировки
* static int binarySearch(xxx[] a, xxx v)
* static int binarySearch(xxx[] a, int start, int end, xxx v)
	Используют алгоритм двоичного поиска для нахождения указанного значения v. 
	При удачаном исходе возвращается индекс найденного элемента. В противном случае
	возвращается отрицательное значение индекса r; а значение индекса r-1 указывает
	на место, куда должен быть вставлен искомый элемент, чтобы сохранился порядок
	сортировки.
* static void fill (xxx[] a, xxx v)
	Устанавливает указанное значение v во всех элементах массива a
* static boolean equals (xxx[] a, xxx b)
	Возвращает логическое значние true, если сравниваемые массивы имеют равную длинну 
	и совпадают все их элементы по индексу, если сравниваемые массивы имеют одинаковую длину
	и одинаковые элементы на соответствующих позициях. Сравниваемые массивы могут содержать
	элементы типа Object, int, lonq, short, char, Ьуtе, Ьoolean, float или douЬle.
* static int hashCode(type[] а) 5.0
	Вычисляет хеш-код массива а, который может содержать элементы тиnа Object, int, long,
	short, char, byte, boolean, float или double.

* static void sort(Object[] а)
	Сортирует элементы массива а. Все элементы массива должны соответствовать классам. реализующим
	интерфейс Comparable, и быть совместимыми.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.ArrayList
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* ArrayList<T> ()
	Конструирует пустой списочный массив.
* ArrayList<T>(int initialCapacity)
	Конструирует пустой списочный массив заданной емкости.
* boolean add (Т оbj)
	Добавляет элемент в конец массива. Всегда возвращает логическое значение true.
* int size ()
	Возвращает количество элементов, хранящихся в списочном массиве. !Количество элементов отличается
	от емкости массива и не превосходит ее.1
* void ensureCapacity(int capacity)
	Обеспечивает емкость списочного массива, достаточную для хранения заданного количества элементов
	без изменения внутреннего массива, предназначенного для хранения данных в памяти.
* void trimToSize ()
	Сокращает емкость списочного массива до его текущего размера.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.ArrayList<T>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* void set(int index, Т оbj)
	Устанавливает значение в элементе списочного массива по указанному индексу, заменяя предыдущее
	его содержимое.
* Т get (int index)
	Извлекает значение, хранящееся в элементе списочного массива по указанному индексу.
* void add(int index, Т оbj)
	Сдвигает существующие элементы списочного массива для вставки нового элемента.
* Т remove (int index)
	Удаляет указанный элемент и сдвигает следующие за ним элементы. Возвращает удаленный
	элемент.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.LocalDate
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static LocalTime now()
	Строит объект, nредставляющий текущую дату.
* static LocalTime of(int year, int month, int day)
	Строит объект, nредставляющий заданную дату.
* int qetYear()
* int qetмonthValue()
* int qetDayOfМonth()
	Получают год, месяц и день из текущей даты.
* DayOfWeek qetDayOfWeek()
	Получает день недели из текущей даты в виде экземnляра класса DayOfWeek. Для nолучения дня
	недели в nределах от 1 [nонедельник) до 7 !воскресенье) следует вызвать метод getValue ().
	LocalDate plusDays(int n)
* LocalDate minusDays(int n)
	Выдают дату на п дней nосле или до текущей даты соответственно.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util???.Objects
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static <Т> void requireNonNull (Т оbj)
* static <Т> void requireNonNull (Т obj, String message)
* static <Т> void requireNonNull(T оbj, Supplier<String> messageSuppiier) 8
	Если параметр obj принимает пустое значение null, эти методы генерируют исключение типа
	NullPointerException без стандартного или заданного сообщения об ошибке. (В главе 6 поясняется,
	как получить значение по требованию с помощью поставщика, а в главе 8 - синтаксис
	обобщенного типа <Т>.)
* static <Т> т requireNonNullElse (Т оЬj, т defaui tObj)
* static <Т> Т requireNonNullElseGet (Т obj, Supplier<T> defaui tSuppiier)
	Возвращают объект, задаваемый параметром оbj, если этот параметр не принимает пустое значение
	null, а иначе - объект, выбираемый по умолчанию.
* static boolean equals(Object а, Object b)
	Возвращает логическое значение true, если оба nараметра, а и Ь, имеют nустое значение null;
	логическое значение false, если один из них имеет nустое значение null; а иначе - результат
	вызова а. equals (b) .

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Objects
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* int hashCode ()
	Возвращает хеш-код объекта. Хеш-код nредставляет собой nоложительное или отрицательное целое
	число. Для равнозначных объектов должны возвращаться одинаковые хеш-коды.
* static int hash(Object ... объекты)
	Возвращает хеш-код, состоящий из хеш-кодов всех nредоставляемых объектов.
* static int hashCode(Object а)
	Возвращает нуль, если nараметр а имеет nустое значение null, а иначе - делает вызов
	а.hashCode () .
* Class getClass ()
	Возвращает класс объекта, содержащий сведения об объекте. Как будет показано далее в этой
	главе. в Java поддерживается динамическое представление классов, инкапсулированное в классе
	Class.
* boolean equals(Object otherObject)
	Сравнивает два объекта и возвращает логическое значение true, если объекты занимают одну
	и ту же область памяти. а иначе - логическое значение false. Этот метод следует переопределить
	при создании собственных классов.
* String toString ()
	Возвращает символьную строку, представляющую значение объекта. Этот метод следует переопределить
	при создании собственных классов.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Integer
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* int intValue()
	Возвращает значение из данного объекта типа Integer в виде числового значения типа int
	(этот метод переопределяет метод intValue () из класса NumЬer).
* static String toString(int i)
	Возвращает новый объект типа String, представляющий числовое значение в десятичной форме.
* static String toString(int i, int radix)
	Возвращает новый объект типа String, представляющий число в системе счисления, определяемой
	параметром radix.
* static int parseint (String s)
* static int parseint (String s, int radix)
	Возвращают целое значение. Предполагается, что объект типа String содержит символьную
	строку, представляющую целое число в десятичной системе счисления (в первом варианте метода)
	или же в системе счисления, которая задается параметром radix !во втором варианте метода!.
* static Integer valueOf (String s)
* static Integer valueOf(String s, int radix)
	Возвращают новый объект типа Integer, инициализированный целым значением, которое задается
	с помощью первого параметра. Предполагается, что объект типа String содержит символьную
	строку, представляющую целое число в десятичной системе счисления (в первом варианте метода)
	или же в системе счисления, которая задается параметром radix (во втором варианте метода).
* static int compare (int х, int у) 
	Возвращает отрицательное целое значение, если х < у; нулевое значение - х
	положительное целое значение.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Double
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static int compare (douЬle х, double у)
	Возвращает отрицательное целое значение, если х < у; нулевое значение - х
	положительное целое значение.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.text.NumberFormat
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* NumЬer parse (String s)
	Возвращает числовое значение, полученное в результате синтаксического анализа параметра.
	Предполагается, что объект типа String содержит символьную строку, представляющую числовое
	значение.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Enum<E>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static Enum valueOf(Class enumClass, Strinq name)
	Возвращает константу nеречислимого тиnа указанного класса с заданным именем.
* Strinq toStrinq ()
	Возвращает имя константы nеречислимого тиnа.
* int ordinal ()
	Возвращает nозицию данной константы в объявлении nеречислимого тиnа, начиная с нуля.
* int compareTo (Е other)
	Возвращает отрицательное целое значение, если константа nеречислимого тиnа следует nеред
	nараметром other, О - если this == other, а иначе - nоложительное целое значение. Порядок
	следования констант задается в объявлении nеречислимого тиnа.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Class
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* String getName ()
	Возвращает имя класса.
* Class getSuperclass()
	Возвращает имя суперкласса данного класса в виде объекта типа Class.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.(IntegerlLonglShortlВytelDouЬlelFloatlCharacterlBoolean)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static int hashCode((intllonglshortlbyteldouЬlelfloatlcharlboolean)
 value) 8
	Возвращает хеш-код заданного значения.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.Random
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Random()
	Создает новый генератор случайных чисел
* int nextInt(int n)
	Возвращает случайное число в пределах от 0 до n - 1
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
НУЖНО СДЕЛАТЬ ПАПКИ для классов JAVA
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
java -classpath c:\classdir;.;
c:\archives\archive.jar MyProg


Для запуска прикладных программ из JАR-файлов имеется немало коммерческих
и свободно доступных программных продуктов вроде Launch4J (http: //launch4j.
sourceforge. net) и IzPack (http://izpack.org).
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.swing.JOptionPane
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static void sho'llМessageDialog(Component parent, Object message)
	Отображает диалоговое окно с подсказкой сообщений и экранной кнопкой ОК. Это диалоговое
	окно располагается по центру родительского компонента, обозначаемого параметром parent.
	Если же параметр parent принимает пустое значение null, диалоговое окно располагается
	по центру экрана.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.swing.Timer
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Timer (int interval, ActionListener listener)
	Строит таймер, уведомляющий указанный приемник событий listener всякий раз, когда истекает
	промежуток времени, заданный в миллисекундах.
* void start ()
	Запускает таймер. Как только таймер будет запущен, он вызывает метод actionPerformed ()
	для приемников своих событий.
* void stop ()
	Останавливает таймер. Как только таймер будет остановлен, он больше не вызывает метод
	actionPerformed() для приемников своих событий.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.awt.Toolkit
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* static Toolkit getDefaultToolkit()
	Получает набор инструментов, выбираемый по умолчанию. Этот набор содержит сведения о среде
	GUI.
* void bеер()
Издает звуковой сигнал.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.lang.Throwable
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Тhrowable ()
	Создает новый объект типа Throwable, не сопровождая его подробным сообщением.
* Тhrowable (String message)
	Создает новый объект типа Throwable, сопровождая его подробным сообщением. По соглашению
	все классы исключений должны содержать два конструктора: конструктор по умолчанию
	и конструктор с подробным сообщением.
* String getмessage ()
	Получает подробное сообщение, предусмотренное в объекте типа ThrowaЫe.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	java.util.Collection<E>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
* Iterator<E> iterator()
	Возвращает итератор, который можно использовать для перебора элементов коллекции.
* int size ()
	Возвращает количество элементов, хранящихся в коллекции на данный момент.
* boolean isEmpty ()
	Возвращает логическое значение true, если коллекция не содержит ни одного из элементов.
* boolean contains (Object obj)
	Возвращает логическое значение true, если коллекция содержит объект, равный заданному объекту
	оbj.
* boolean containsAll (Collection<?> other)
	Возвращает логическое значение true, если коллекция содержит все элементы из другой коллекции.
* boolean add(Object e.lement)
	Добавляет элемент в коллекцию. Возвращает логическое значение true, если в результате вызова
	этого метода коллекция изменилась.
* boolean addAll(Collection<? extends Е> other)
	Добавляет все элементы из другой коллекции в данную. Возвращает логическое значение true,
	если в результате вызова этого метода коллекция изменилась.
* boolean remove(Object оbj)
	Удаляет из коллекции объект, равный заданному объекту obj. Возвращает логическое значение
	true, если в результате вызова этого метода коллекция изменилась.
* boolean removeAll (Collection<?> other)
	Удаляет из данной коллекции все элементы другой коллекции. Возвращает логическое значение
	true, если в результате вызова этого метода коллекция изменилась.
* default boolean removeif (Predicate<? super Е> fillter) В
	Удаляет из данной коллекции все элементы, для которых по заданному условию fil ter возвращается
	логическое значение true. Возвращает логическое значение true, если в результате вызова
	этого метода коллекция изменилась.
* void clear ()
	Удаляет все элементы из данной коллекции.
* boolean retainAll(Collection<?> other)
	Удаляет из данной коллекции все элементы, которые не равны ни одному из элементов другой
	коллекции. Возвращает логическое значение true, если в результате вызова этого метода коллекция
	изменилась.
* Object [] toArray ()
	Возвращает из коллекции массив объектов.
* <Т> Т [] toArray (Т [] arrayТoFill)
	Возвращает из коллекции массив объектов. Если заполняемый массив arrayТoFill имеет достаточную
	длину, он заполняется элементами данной коллекции. Если же остается место, добавляются
	пустые элементы lnull). В противном случае выделяется и заполняется новый массив с тем
	же типом элементов и длиной, что и у заданного массива arrayТoFil.l.
---
* boolean hasNext ()
	Возвращает логическое значение true, если в коллекции еще имеются элементы, к которым можно
	обратиться.
* Е next()
	Возвращает следующий перебираемый объект. Генерирует исключение типа NoSuchElement
	Exception, если достигнут конец коллекции.
* void remove ()
	Удаляет последний перебираемый объект. Этот метод должен вызываться сразу же после обращения
	к удаляемому элементу. Если коллекция была видоизменена после обращения к последнему
	ее элементу, этот метод генерирует исключение типа IllegalStateException.
* defaul t void forEachRemaining (Consumer<? super Е> action) 8
	Обходит элементы и передает их заданному действию до тех пор, пока в коллекции не останется
	ни одного элемента, а иначе в этом действии будет сгенерировано исключение.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
