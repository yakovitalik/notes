==============================
	ПОМОЩНИК C#
==============================
==============================
==============================
	ОБЩЕЕ
==============================
/* */ - многостройный коментарий;
// - стройчный комментарии;
/// - комментарии (документирование);

Объявление массива: (массивы в C# представлены в виде объектов)
тип[] имя_массива = new тип[размер]

Например:
int[] array = new int[10];
Многомерный:
int[,] array = new int[10, 20];

ref	Модификатор для передачи простых типов по ссылке вместо значения
out	Модификатор для передачи ссылочных типов(объектов) по значению вместо ссылки

interface			интерфейс
struct				структура
class				класс
enum				перечисления
==============================
КЛЮЧЕВЫЕ СЛОВА
==============================
Зарезервированные
*****************
abstract	as		base		bool		break
byte		case		catch		char		checked
class		const		continue	decimal		default
delegate	do		double		else		enum
event		explicit	extern		false		finally
fixed		float		for		foreach		goto
if		implicit	in		int		interface
internal	is		lock		long		namespace
new		null		object		operator	out
override	params		private		protected	public
readonly	ref		return		sbyte		sealed
short		sizeof		stackalloc	static		string
struct		switch		this		throw		true
try		typeof		uint		ulong		unchecked
unsafe		ushort		using		virtual		volatile
void		while
***************************
Контекстные
***************************
add		dynamic		from		get		global
group		into		join		let		ordebry
partial		remove		select		set		value
var		where		yield

(int)x		- операция приведения типов
==============================
==============================
ТИПЫ ДАННЫХ
==============================
ПРОСТЫЕ (ПРИМИТИВНЫЕ)
bool		логический тип(значения true и false)
byte		8-разрядный целочисленный без знака
char		одиночный символ
decimal		Десятичный(для финансовых расчетов), смесь целого числа и с плаввающей точкой
double		число с плавающей точкой двойной точности (14 знач знаков)
float		число с плавающей точкой одинарной точности (6 знач знаков)
int		целое число
long		длинный целочисленный
sbyte		8-разрядный целочисленный со знаком
short		короткий целочисленный
uint		целочисленный без знака
ulong		длинный целочисленный без знака
ushort		короткий целочисленный без знака
------------------------------
Сложные

string		строка


DateTime	дата и время
var		Неявно типизированая переменная
		(компилятор сам выбирает тип  в зависимости от содержимого)
========================================
УПРАВЛЯЮЩИЕ ПОСЛЕДОВАТЕЛЬНОСТИ СИМВОЛОВ
========================================
\a	Звуковой сигнал(звонок)
\b	Возврат на одну позицию
\f
\n
\r
\t
\v
\0
\'
\"
\\

==============================
ОПЕРАТОРЫ ОТНОШЕНИЙ
==============================
==	Равно
!=	Не равно
>	Больше
<	Меньше
>=	Больше или равно
<=	Меньше или равно
==============================
ЛОГИЧЕСКИЕ ОПЕРАТОРЫ
==============================
&	И
|	ИЛИ
^	Исключающее ИЛИ
&&	Укороченное И
||	Укороченное ИЛИ
!	НЕ
==============================
КОНСОЛЬНЫЙ ВВОД-ВЫВОД
==============================
Console.Write();			Console.Write("Hello!");			Выводит данные в консоль(без переда на новую строку по окончании)
Console.WriteLine("");			Console.WriteLine("x = " + x);			Выводит данные в консоль(С передом на новую строку по окончании)
Console.Read();
Console.ReadLine();
--------------------------------
Форматированный вывод числа с двумя знаками после запятой:
Console.WriteLine("Деление 10 / 3 дает: (0:#.##)", 10.0/3.0);
Вывдет:
Деление 10 / 3 дает: 3.33
==============================
РАБОТА СО СТРОКАМИ
==============================
Compare()		String.Compare(string1, string2)			Метод сравнивает строки s1 и s2 (0 если совпадают)
Вариант2		String.Compare(s1, s2, true)				Сравнивает строки s1 и s2(true - с игнорированием регистра букв, false - с учетом)

Общая форма:
Результат = string.Compare(str1, str2, способ);

==			Сравнивает содержимое двух строк

ToUpper()
ToLower()

StringComparison:
StringComparison.CurrentCulture			Сравнение с учетом культурной среды (языковых и региональных стандартов()
StringComparison.Ordinal			Сравнение строк только на основании значений символов
StringComparison.CurrentCultureIgnoreCase	Сравнение строк без учета регистра (способ1)
StringComparison.OrdinalIgnoreCase		Сравнение строк без учета регистра (способ2)
++++++++++++++++++++++++++++++
СТРОКОВЫе МЕТОДЫ
++++++++++++++++++++++++++++++

static int Compare(string strA,			Возвращает отрицательное значение, если строка strA меньше
 string strB, StringComparison			строки strB; положительное значение, если строка strA 
 comparisonType)				больше строки strB; и нуль, если сравниваемые строки равны.
						Способ сравнения определяется аргументом comparisonType

bool Equals(string value,			Вовращает логическое значение true, если вызывающая строка 
StringComparison comparisonType)		имеет такое же значение, как и у аргумента value.
						Способ сравнения определяется аргументом comparisonType

int IndexOf(char value)				Осуществляет поиск в вызывающей строке первого вхождения 
						символа, определяемого аргументом value. Применяется порядковый
						способ поиска. Возвращает индекс первого совпадения с искомым 
						символом, или -1, если он не обнаружен.

int IndexOf(string value, 			Осуществляет поиск в вызывающей строке первого вхождения
StringComparison comparisonType)		подстроки, определяемой аргументом value. Возвращает индекс первого
						совпадения с искомой подстрокой или -1, если она не обнаружена.
						Способ сравнения определяется аргументом comparisonType

int LastIndexOf(char value)			Осуществляет поиск в вызывающей строке последнего вхождения 
						символа, определяемого аргументом value. Применяется порядковый
						способ поиска. Возвращает индекс последнего совпадения с искомым 
						символом, или -1, если он не обнаружен.

int LastIndexOf(string value,			Осуществляет поиск в вызывающей строке последнего вхождения
StringComparison comparisonType)		подстроки, определяемой аргументом value. Возвращает индекс последнего 
						совпадения с искомой подстрокой или -1, если она не обнаружена.
						Способ сравнения определяется аргументом comparisonType

string ToLower(CultureInfo.			Возвращает вариант вызывающей строки в нижнем регистре. 
CurrentCulture culture)				Способо преобразования определяется аргументом culture

string ToUpper(CultureInfo.			Возвращает вариант вызывающей строки в верхнем регистре. 
CurrentCulture culture)				Способо преобразования определяется аргументом culture

string Substring(int индекс_начала,		Возвращает новую строку, содержащую часть вызывающей строки
 int длинна)					индекс_начала - начальный индекс исходной строки, 
						длинна - длинна выбираемой подстроки

==============================
==============================
УСЛОВНЫЙ ОПЕРАТОР IF
==============================
Простая форма
if(условие) оператор;
else оператор;

Множественное ветвление:
if(условие1) 
	оператор;
else if(условие2)
	оператор;
else if(условие3)
	оператор;
....
else
	оператор;
==============================
Switch
==============================
switch (Выражение)
{
	case константа1:
		последовательность операторов
		break;
	case константа2:
		последовательность операторов
		break;
	case константа3:
		последовательность операторов
		break;
	......
	default:
		последовательность операторов
		break;
}
==============================
ЦИКЛЫ
==============================
++++++++++++++++++++++++++++++
FOR
++++++++++++++++++++++++++++++
for (инициализация; условие; итерация) оператор;
Если результат проверки условия ИСТИНА - цикл продолжается, ЛОЖЬ - завершается.

ОБЩАЯ ФОРМА:
for (инициализация; условие; итерация)
{
	последовательность операторов
}
==============================
++++++++++++++++++++++++++++++
WHILE
++++++++++++++++++++++++++++++
while(условие) оператор;

==============================
++++++++++++++++++++++++++++++
DO WHILE
++++++++++++++++++++++++++++++
do
{
	операторы;
} while(условие);
==============================
FOREACH
==============================
foreach (тип имя_переменной_цикла in коллекция) оператор;

==============================
ОПЕРАТОРЫ УПРАВЛЕНИЯ
==============================
break;			вызывает немедленный выход из данного цикла
continue;		принудительный переход к следующему шагу цикла
return;			возврат из метода(а также возврат значения)
goto;			оператор безусловного перехода
==============================
******************************************************************************************
					ООП
******************************************************************************************
==============================
КЛАСС
==============================
class имя_класса 
{
	// оъявление переменных экземпляра
	доступ тип переменная1;
	доступ тип переменная2;
	//...
	доступ тип переменная N;

	// Объявление методов
	доступ возвращаемый_тип метод1(параметры)
	{
		// тело метода1
	}
	доступ возвращаемый_тип метод2(параметры)
	{
		// тело метода2
	}
	//...
	доступ возвращаемый_тип методN(параметры)
	{
		// тело методаN
	}
}

static class имя_класса {...}
==============================
ОБЪЕКТ
==============================
имя_класса имя_объекта = new имя_класса();

например:
Building house = new Building();

==============================
ОПЕРАТОРЫ
==============================
объект.член		оператор доступа (оператор точка)

==============================
==============================
МЕТОД - общая форма
==============================
доступ возвращаемый_тип имя(список параметров)
{
	// тело метода;
}
==============================
==============================
КОНСТРУКТОР - общая форма
==============================
доступ имя_класса(список параметров)
{
	// тело конструктора;
}

Вызов конструктора базового класса из производного 
с помощью оператора base:
конструктор_производного_класса(список_параметров) : base(список_аргументов)
{
	// тело конструктора
}

==============================
СВОЙСТВА
==============================
Общая форм свойства
тип имя
{
	get
	{
		// код аксессора для чтения из поля
	}

	set
	{
		// код аксессора для записи в поле
	}
}
Автоматическое свойство:
тип имя { get; set; }
Например, свойство, автоматически реализуемое под именем UserCount
public int UserCount { get; set; }
==============================
==============================
ПЕРЕГРУЗКА ОПЕРАТОРОВ
==============================
// Общая форма перегрузки унарного оператора:
public static возвращаемый_тип operator op(тип_параметра операнд)
{
	// операции
}

// Общая форма перегрузки бинарного оператора:
public static возвращаемый_тип operator op(тип_параметра1 операнд1, тип_параметра2 операнд2)
{
	// операции
}
==============================

**************************************************************************************
БИБЛИОТЕКИ
**************************************************************************************
================================
System.Math
================================
Sqrt()			Возвращает квадратный корень


================================