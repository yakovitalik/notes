

docker version			Отображает информацию о версии системы, клиента, хоста
docker ps -a			Показывает список запущенных и остановленных контейнеров
docker ps			Увидеть только запущенные контейнеры
docker images			Показывает список локальных образов

Создание контейнера
docker run hello-world		(где hello-world это образ, из которого создается контейнер)
docker run busybox

Удаление контейнера
docker rm 239d87861981		(где 239d87861981 - id контейнера)

Запуск контейнера с подключением к процессу
docker run -i -t 		(где i - интерактивный, t - терминал)
можно и так:
docker run -it
пример: 
docker run -it busybox

Далее в интерактивном режиме можно использовать комманды:
ls				для просмотра файлов операционной системы
hostname			выдаст id чоста(контейнера)
hostname -i			ip адресс

Эти ip адреса присваиваются dockerom каждому контейнеру автоматически

ping 8.8.8.8			проверка соединения с сервером из busybox
ping google.com

exit				оставновить контейнер
или
docker stop

Удалить все контейнеры, которые были остановлены
docker container prune

Создаем контейнер на основании образа NGINX
docker run nginx

Запуск контейнера в фоновом режиме (d - deteched, осоединенный)
docker run -d nginx

Проверка контейнера, например узнать ip адресс
docker container inspect 7da08d324a42	(id или же имя контейнера)

Или же можно отфильровать только ip адресс:
docker container inspect 7da08d324a42 | grep IPAddress
Выведет только части, содержащие "IPAddress"

Остановить котейнер:
docker stop 7da08d324a42 (передать или id или имя контейнера)

Запуск нового процесса в контейнере:
docker exec -it 7da08d324a42 bash
(где -it это опции подключения интерактивного терминала, id или имя контейнера, bash - название процесса)

Переход в папку с файлом html сервера nginx:
cd /usr/share/nginx/html

Просмотр файлов этой папки:
ls -la

Можем прочитать файл index.html:
cat index.html

После выхода из этой оболочки используя команду exit процесс будет завершен.

Кастомное имя для контейнера:
docker run -d --name my_nginx nginx

========================
ПУБЛИКАЦИЯ ПОРТОВ
========================

Открыть доступ к контейнеру:

docker run -p 8080:80 ngnix

(Где -p - публикация порта(publish), 8080 внешний порт, 80 - порт контейнера)
Т.е. по порту 8080 в браузере мы сможем попасть внутрь контейнера

Пример целой команды:
docker run -d -p 8080:80 nginx

========================
МЭПИНГ ТОМОВ
========================
Это к примеру возможность заменить стандартную страницу nginx

docker ru -v ${PWD}:/usr/share/nginx/html nginx

(где -v подключение тома(volume), ${PWD} - путь к локальной папке, далее путь к папке внутри контейнера, и название образа)
PWD - print working directiory, доступна во всех операционных системах - показывает абсолютный путь к текущей папке
Содержимое папки внутри котейнера будем заменено содержимым папки, путь которой будет получен через PWD
Можно путь в папке писать и вручную

Вся комманда:
docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d nginx

Автоматическое удаление остановленных контейнеров:
docker run -it --rm busybox
Удалит контейнер после его остановки.

========================
Разбивка команды на несколько строк (в Windows не работает)
========================

docker run \
--name my_nginx \
-v ${PWD}:/usr/share/nginx/html \
-p 8888:80 \
-d \
--rm \ 
nginx

Комманда, разбитая на несколько строк при помощи символа \


docker run --name my_nginx -v C:\Users\yakov\Desktop\docker\nginx:/usr/share/nginx/html -p 8888:80 -d --rm nginx

============================================================
Создание образов
============================================================

Пример заполнения Docker-file:
---
FROM python:alpine
WORKDIR /app
COPY . .
CMD ["python", "main.py"]
---
Где python - имя базового образа
alpine - тег(версия) базового образа(указывает на самую минимальную версию)
Если тег опустить, будет использован тег latest
WORKDIR - помощью этой инструкции создается рабочая дирректория внутри образа
нельзя помещать в дирректорию /, нужно создавать свою
COPY мы копируем все файлы текущей папки в папку WORKDIR внутри контейнера
CMD - какая команда буде выполнена, когда создатся новый контейнер, 
	запускается процесс python, и ему передается аргумент "main.py"
--------------------------------------------

После сохранения такого Docker файла, можно создать образ при помощи команды
-
docker build .
-
. указана, если мы уже находимся в папке где есть docker файл
при этом id образа будет случайным, что крайне нежелательно. 
Для задания имени образу:

docker build . -t my-calendar:4.1.3

-t - добавление имени итега для образа
my-calendar - имя
4.1.3 - тег(опционален)
Если тег не указывать, docker добавит автоматически тег latest
Лучше тегировать

И потом чтобы создать контейнер: docker run ...
Если будет два с тегом latest, образ перезапишется новым

---
docker exec -it my-node-app sh






























































