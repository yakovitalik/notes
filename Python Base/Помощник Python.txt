			 --------------------------------
			|	ПОМОЩНИК PYTHON		 |
			 --------------------------------
========================================================
ОБЩАЯ ЧАСТЬ
========================================================
# коментирование
input()		ввести чтобы окно не закрывалось после двух щелчков по файлу, 
		использует ожидание ввода из входного потока
**************
import		import script1		загрузка модуля для выполнения 
***
import imp		импортирует стандартный библиотечный модуль
imp.reload(M)		применяет функцию reload() станд.библ.модуля
**************
from imp import reload
reload(script1)		Загружает модуль для повторного выполнения
**************
myfile.title		Извлекает атрибут(переменную) title из объекта(файла myfile.py) 
			ранее импортированным при помощи import myfile
**************
dir(f)			вызывает список команд и методов для файла f в IDLE
help (f.seek)		вызывает справку по каоманде seek для файла f
range()			range(начало, конец [, шаг])		Формирует список
			range (1,100) или range(1,10,2)
=========================================================
ОПЕРАТОРЫ
=========================================================
имя		применение			описание
---------	----------------------		------------------------------------------
import		import script1			Загрузка модуля для выполнения	
from		from myfile import title	Импортирует переменную title из файла myfile
						(можно будет обращаться напрямую, без точки)
=========================================================
ОПЕРАЦИИ И ВЫРАЖЕНИЯ и СТАРШИНСТВО (Приоритет снизу таблицы)
=========================================================
yield x						Протокол send функции генератора
lambda аргументы: выражение 			Создание анонимной функции
x if y else z					Тернарный выбор (x оценивается, только если y истинно)
x or y						Логическое "ИЛИ" (у оценивается только если х ложно)
x and y						Логическое "И" (у оценивается только если х истинно)
not x						Логическое "НЕ"
x in y, x not in y				Членство(итерируемые объекты, множества)
x is y, x is not y				Проверки идентичности объектов
x < y, x <= y, x > y, x >= y			Сравнение по абсолютной величине 
x == y, x != y					Сравнение равенства значений
x | y						Побитовое "ИЛИ", объединение множеств
x ^ y 						Побитовое исключающее "ИЛИ", симметричная разность множеств
x & y						Побитовое "И", пересечение множеств
x << y, x >> y					Сдвиг х влево или вправо на у битов
x + y						Сложение, конкатенация
x - y						Вычитание, разность множеств
x * y						Умножение, повторение
x % y						Остаток от деления, формат
x / y, x // y					Деление и деление с округлением в меньшую сторону
-x, +x						Противоположность, идентичность
~x						ПОбитовое "НЕ" (инверсия)
x ** y 						Возведение в степень
x[i]						Индексация(последовательности, отображения и тд)
x[i:j:k]					Нарезание
x(...)						Вызов (функции, метода, класса и прочих вызываемых объектов)
x.атрибут					Ссылка на атрибут
(...)						Кортеж, выражение, выражение генератора
[...]						Список, списковое включение
{...}						Словарь, множество, включение множеств и словарей
()						Изменение приоритета
_____________________________________________________________________________________________________________
=========================================================
БИБЛИОТЕКИ и МОДУЛИ
=========================================================
Импорт модуля:
import math
_____________________________________________________________________________________________________________
imp			Стандартный библиотечный модуль
re			Модуль регулярных выражений (обработка строк на основе образцов)
sys			Системный модуль
math			Модуль с математическими функциями
round
random			Генератор случайных чисел
struct			Создает и распаковывает упакованные двоичные данные
copy			Копирование объектов
_____________________________________________________________________________________________________________
=========================================================
ФУНКЦИИ
=========================================================
Название		Пример применения				Описание
________		_________________				_________
print()		print('Hello World!')			Выводит переменную/строку в выходной поток
input()		input('Press Enter to exit')		Считывает данные с входного потока(клавиатуры)
reload()	reload(script1)				Загружает модуль для повторного выполнения
dir()		dir(threenames)				Возвращает список строк Python в квадратных 
							скобках
exec()		exec(open('script1.py').read())		Запускает файл
len()		len(str(2**100))			Показывает количество элементов в строке(длинну)
set()		X = set('spam')				Создает множество из последовательности
hex()		hex(I)					Преобразует целое число в строку представления 
							в 16-ричном формате
oct()		oct(I)					Преобразует целое число в строку представления 
							в 8-ричном формате
bin()		bin(I)					Преобразует целое число в строку представления 
							в 2-ичном формате
int()		int(str, base)				Преобразует строку в целое число по заданному
							основанию base
complex()	complex(real, imag)			Создает комплексное число
_____________________________________________________________________________________________________________
==========================================================
МОДУЛЬНЫЕ ИНСТРУМЕНТЫ (СТАНДАРТНЫЕ)
==========================================================
imp
-------------

sys
-------------
getrefcount()			getrefcount(x)			Возвращает счетчик ссылок объекта 
								(кол-во ссылок на объект)


math
-------------

math.sqrt()			math.sqrt(85)			Извлекает квардратный корень
math.pi				math.pi				Выводит число Pi (3,141592)


random
-------------
random.random()			random.random()			Генерирует случайное число
random.choice()			random.choice([1, 2, 3, 4])	Случайный выбор из коллекции

struct
-------------

copy
-------------
copy.copy()			X=copy.copy(Y)			Создать "поверхостную" копию верхнего уровня
								любого объекта Y
copy.deepcopy()			X=copy.deepcopy(Y)		Создать глубокую копию любого объекта Y
								Копировать все вложенные части

_____________________________________________________________________________________________________________
===========================================================
ПРЕОБРАЗОВАНИЕ ТИПОВ
===========================================================
int()		int('42')		Преобразует в целочисленный тип
float()		float('100')		Преобразует в тип с плавающей точкой
str()		str(42)			Преобразует в строку
list()		list('spam')		Преобразует в список(массив) строку
join()		x= ' '.join(S)		Преобразует в строку в список(массив)
_____________________________________________________________________________________________________________
===========================================================
РАБОТА СО СТРОКАМИ
===========================================================
X[I:J]			X[0:3]			Срез элементов (с I по J)
find()			S.find('pa')		Поиск подстроки в S
replace()		S.replace('pa', 'XYZ')	заменяет в S одну подстроку другой
split()			linr.split(',')		Разбивает по разделителю подстроки
upper()			S.upper()		Преобразовывает в верхний и нижний регистры
iasalpha()		S.iasalpha()		Проверить содержимое(является ли буквой)
isdigit()		S.isdigit()		Проверить содержимое(является ли цифрой)
rstrip()		line.rstrip()		Удалить пробельные символы с правой стороны
r''			r'\new'			Неформатированная строка(отключает преобр \n в пути файлов)
например:
myfile = open(r'C:\new\text.dat', 'w')		Отключит преобразование \n и \t в упр последовательности
myfile = open('C:\\new\\text.dat', 'w')		Второй вариант так сделать

len()			len('abc')		Длинна: количество элементов
str.title()		x=str.title(s)		Делает заглавной первую букву каждого слова строки s

_____________________________________________________________________________________________________________
===========================================================
СПИСКОВЫЕ МЕТОДЫ
===========================================================
format()		format()		Форматирует строки по множествам заданных параметров
append()		L.append('NI')		Увеличивает размер списка и помещает объект в 
						конец (создает новый)
pop()			L.pop(2)		Уменьшение: удаление элемента из списка (создает новый)
del [i]			del L[2]		Так же удаляет элемент со смещением списка (создает новый)
insert()		insert()		Вставляет элемент в произвольную позицию (создает новый)
remove()		remove()		Удаляет указанный элемент по значению (создает новый)
extend()		extend()		Добавляет множество элементов в конец (создает новый)
sort()			M.sort()		Сортирует список по возрастанию (изменяет список)
reverse()		M.reverse()		Обращает список в обратной последовательности(изменяет список)
_____________________________________________________________________________________________________________
===========================================================
РАБОТА С ФАЙЛАМИ
===========================================================
open()				f=open('data.txt', 'w')		Создает обект файла новый текстовый файл
				f=open('data.txt')		r (чтение) стандартный режим обработки файла
write()				f.write('Hello\n')		Записывает в него строку символов
read()				text = f.read()			Прочитать все содержимое файла в строку
close()				f.close()			Закрывает для сбрасывания буфера вывода на диск 
file = open('unidata.txt', ’w’, encoding='utf-8')		Записать текст и закодировать UTF-8
text = open('unidata.txt’, encodings'utf-8').read()		Прочитать текст, декодирвоать UTF-8
_____________________________________________________________________________________________________________
===========================================================
ЦИКЛЛЫ и УСЛОВИЯ
===========================================================
for
-----
for i in range(1, 10):
	print(i)
*****


if-else
-----
if i > 5:
	print(i)
elif i >= 0:
	print('так себе')
else:
	print(мало)
*****

while
-----



*****
_____________________________________________________________________________________________________________

===========================================================
МНОЖЕСТВА, СПИСКИ
===========================================================
set()		set(L)		Удаляет дубликаты в списке L

set([1, 3, 5, 7]) - set([1, 2, 4, 5, 6])	Найти различия в списках	#{3,7}
set('abcderfg') - set('abdghij')		Найти различия в строках	#{'c', 'e'. 'f'}
set('spam') -set(['h', 'a','m'])		Найти различия в разнородных	#{'p', 's'}
						типах	
L2 = L1[:]					Создает копию L1(так же можно - list(L1), copy.copy(L1))

Для словарей и множеств:
X.copy()

L == M						Проверяет, имеет ли два списка одинаковые значения
L is M						Проверяет, ссылается ли L и M на один и тот же объект
_____________________________________________________________________________________________________________

===========================================================
Расширения PYTHON
===========================================================
NumPy (Numeric Python)	Содержит инструменты численного программирования, например матричный тип данных,
			обработка векторов, библиотеки сложных вычислений


_____________________________________________________________________________________________________________
===========================================================
ТИПЫ ДАННЫХ PYTHON
===========================================================
Числа, строки, кортежы - неизменяемые типы
Списки, словари, множества - изменяемые типы
_____________________________________________________________________________________________________________
===========================================================
ОБРАБОТКА ИСКЛЮЧЕНИЙ
===========================================================
for i in range(10):
	s = input('Ваше число: ')
	try:
		n = int(s)
	except ValueError as e:
		print('Это не число')

Порождать исключение:
raise ValueError('Значение не такое как надо')
_____________________________________________________________________________________________________________
