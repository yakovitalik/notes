				    ---------------------------------
				   | PYTHON шпаргалка по синтаксису  |
				    ---------------------------------
*************************************************************************************************************
tab = 4 пробела
===============================
НАЗНАЧЕНИЕ ПЕРЕМЕННЫХ
===============================
integer = 1						целое число
string = "string"					строка
unicode_string = u"unicode string"			юникод
multi_line_string = "multi-line				многострочная строка
			string"
tuple = (element1, element2, element3,...)		Кортеж
list = [element1, element2, element3,...]		Список
dictionary = {key1: value1, key2: value2,...}		Словарь
dictionary[key] = value					Значение по ключу
class_instance = ClassName(init_args)			Экземпляр класса (объект)
*************************************************************************************************************
===============================
ВСТРОЕННЫЕ ТИПЫ
===============================
True		False		None
str		unicode		int
float		list		dict

Кроме True, False и None их также можно использовать как функции для явного приведения
 значения к этому типу
*************************************************************************************************************
===============================
ФУНКЦИИ
===============================
def имя_функции (arg1, arg2, keyword1=wal1, keyword2=wal2,...)
	<тело функции>
	return вовзращаемое_значение
Например:
def my_function (x,y,z=0):
	sum = x+y+z
	return sum
*************************************************************************************************************
===============================
КЛАССЫ
===============================
class Имя_класса(SuperClass):
	class_variable = static_value
	def __init__(self, value1, <...>):
		sef.instance_variable1=value1
		self.instance_function()
	def instance_function(self,arg1,<...>):
		<function body>
		return return_value
Например:
class MyClass(object):
	offset = 1
	def __init__(self, value):
		self.value = value
	def get_offset_value(self):
		return MyClass.offset + self.value
*************************************************************************************************************
===============================
ИМПОРТ
===============================
import модуль
from модуль import класс, функция, переменная
*************************************************************************************************************
===============================
СТРОКОВЫЕ МАНИПУЛЯЦИИ
===============================
строка1 + строка2		"str" + "ing" -> "string"		Конкатенация
"%s%s" % (string1, string2)	"%s%s" % ("s", "g") -> "sg"		Конкатенация 2
string.split("delim", limit)	"s/g".split("/") -> ["s", "g"]		Разбитие
string.strip()			" string ".strip() -> "string"		Убирает пробелы
sptring.startswith("prefix")	"str".startswirh("s") -> True		Проверка по первому символу
substring in string		"str" in "string" -> True		Содержит
print string								Вывод строки
*************************************************************************************************************
===============================
ПОНИМАНИЕ СПИСКОВ
===============================
[значение for значение in список if состояние]

Например:
[x for x in [1,2,3,4,5,6,7,8,9] if x % 2 == 0] -> [2,4,6,8]
*************************************************************************************************************
===============================
ДОСТУП К ЗНАЧЕНИЯМ ПЕРЕМЕННЫХ
===============================
value = dictionary[key]
value = dictionary.get(key, 
default_value)
value = list[index]			например: [5,6,7][2] -> 7
value = string[start:end]		например: "string"[0:3] -> "str"
value = list[start:end]			например: [1,2,3][1:2] -> [2]
value = ИмяКласса.Переменная_класса
value = Экземпляр_класса.Экземпляр_переменной
value = Экземпляр_класса.Функция(args)
*************************************************************************************************************
===============================
СРАВНЕНИЯ
===============================
value1 == value2			"str" == "str" -> True
value1 != value2			"str" != "str" -> False
value1 < value2				1 < 2 -> True
value1 <= value2			2 <= 2 -> True
value1 > value2				2 > 3 -> False
value1 >= value2			3 >= 3 -> True
value is [not] None
value in list				1 in [2,3,4] - > False
isinstance(Экземпляр_класса, Имя_класса)
*************************************************************************************************************
===============================
БАЗОВАЯ АРИФМЕТИКА
===============================
i = a + b		i = a - b
i = a / b		i = a * b
i = a % b
*************************************************************************************************************
===============================
КОММЕНТАРИИ
===============================
# Строчный коментарий
""" Многострочный
	комментарий
"""
*************************************************************************************************************
===============================
УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ
===============================
+++IF+++				+++ПРИМЕР+++
if условие:				if i == 7
	<тело>					print "seven"
elif условие:				elif i == 8:
	<тело>					print "eight"
else:					else:
	<тело>					print str(i)
++++++++
+++FOR+++
for значение in список:			for i in [1,2,3,4]:
	<тело>					if == 2: continue
	continue				if == 3: break
	break					print i
++++++++
+++WHILE+++
while условие:				while True:
	<тело>					print "infinity"
	continue
	break
++++++++
*************************************************************************************************************
===============================
ИСКЛЮЧЕНИЯ
===============================
					Например:
try:					try:
	<тело>					database.update()
	raise Exception()		expect Exception as e:
except Expeption as e:				log.error(e.msg)
	<обработка исключений>			database.abort()
finally: 				finally:
	<уборка>				database.commit()
*************************************************************************************************************
===============================
ОПЕРАЦИИ С ФАЙЛАМИ
===============================
import os	# сначала импортируем модуль ОС
os.path.join(path_segment1, path_segment2,...)
os.path.exists(path)
os.listdir(directory_path)
os.remove(file_path)
os.rmdir(directory_path)
file = open(path, "rw")
file.read()
string.write("string")
*************************************************************************************************************