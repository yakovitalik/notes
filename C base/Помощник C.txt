/////////////////////////////////////////////////////////////////////////////////////////////////////////////
*******************************
ДИРЕКТИВЫ ПРЕПРОЦЕССОРА
*******************************
Заголовочные файлы
#include <stdio.h> - ввод/вывод
#include <string.h> - строки
#include <time.h> - 
#include <ctype.h> - типы
#include <stdlib.h> - библиотека
#include <math.h> - математические функции. Работаю с типом double.
#include <time.h> - функции времени
#include <stdint.h> - содержит дополнительные имена для существующих типов (int32_t - 32 битовое значение)
#include <inttypes.h> - (intlist8_t, intfast8_t, intmax_t)
#include <limits.h> - содержит информацию об ограничениях размеров целочисленных типов; INT_MAX (константы)
#include <float.h> - содержит информацию об ограничениях размеров типов с плавающей точкой;
*******************************
Константы
#define MYAGE 32 
#define MYNAME "Vitaliy Iakovlev"
#define PI 3.14159
Каждый раз в программе меняет КОНСТАНТУ на значение
const int MONTHS = 12; / / MONTHS является символической константой для 12
*******************************
Общее
extern		extern int var		// объявление внешней переменной (внешней для этой функции)
enum		перечисление
()		(double)var1		Приведение типа. Приводит переменную к указаному в скобках типу(создает новую)
*******************************
*Отображение русского языка в консоли после компиляции*

#include <locale.h>   
setlocale(0, "Russian");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
*******************************
***ФУНКЦИИ***
*******************************
***	
Имя			Применение				Обозначение								Заголовочн.файл
strcpy()		strcpy(массив, "текст"); 		Запись новой строки в массив						string.h
sizeof()		sizeof(name);				Отображает размер типа, переменной, массива (в байтах)				string.h
strlen()		strlen(name);				Отображает длинну строки						string.h
strcat()		strcat(first,last);			Принимает одну строку last и прибавляет ее к другой first		string.h


printf()		printf("Привет");			Вывод на экран Привет							stdio.h
scanf()			scanf(" %d", &x);			Запись введенных значений						stdio.h
putchar()		putchar()				Выводит один символ на экран						stdio.h
putch()			putch()					Выводит один символ на экран без Enter					stdio.h
getchar()		getchar()				Принимает один символ с клавиатуры					stdio.h
getch()			getch()					Принимает один символ с клавиатуры без Enter				stdio.h
puts()			puts("Текст")				Выводит строку текста на экран						stdio.h
gets()			gets(массив)				Принимает строку текста с клавиатуры					stdio.h
fgets()			fgets(указ, 81, stdin)			Принимает строку огр.размера с клавиатуры				stdio.h
fopen()			fopen("путь файла","W")			Открытие файла с диска							stdio.h
fclose()		fclose(указатель на файл)		Закрытие файла по окончании записи					stdio.h
FILE			FILE * name;				Создание указателя на файл						stdio.h
fprintf()		fprintf(указатель на файл, данные)	Запись в файл								stdio.h
fscanf()		fscanf()				Считывает отдельные числовые значения					stdio.h
fgets()			fgets(массив, кол-во симв, указатель)	Чтение содержимого файла						stdio.h
fputs()			fputs()					Запись в файл								stdio.h
fputc()			fputc()					Вывод отдельного символа из программы в файл				stdio.h (stdlib?)
fgetc()			fgetc()					Ввод отдельного символа из файла в программу				stdio.h (stdlib?)
feof()			feof()					Возвращает значение ИСТИНА если была прочитана посл.строка файла	stdio.h
fseek()			fseek(указатель файла, longVal, начало)	Функция перемещения по файлу						stdio.h


exit()			exit(1);				Выход из программы							stdlib.h
rand()			rand()					Возвращает (Генерирует) случайное число от 0 до 32767			stdlib.h
srand() 		srand()					Задание семени генератору случайных чисел				stdlib.h
malloc()		malloc(100 * sizeof(int))		Выделяет динамическую память						stdlib.h
free()			free(указатель)				Освобождает динамическую память						stdlib.h

isalpha()		isalpha()				Возвращает ИСТИНА(1) если в скобках буква A-Z и ЛОЖЬ если др.символ	ctype.h														
isdigit()		isdigit()				Возвращает ИСТИНА(1) если в скобках цифра 1-9 и ЛОЖЬ если др.символ	ctype.h
isupper()		isupper()				Возвращает ИСТИНА(1) если загл.буква и ЛОЖь в др.			ctype.h
islower()		islower()				Возвращает ИСТИНА(1) если мал.буква и ЛОЖь в др.			ctype.h
toupper()		toupper()				Возвращает аргумент из скобок в виде загл.букв				ctype.h
tolower()		tolower()				Возвращает аргумент из скобок в виде мал.букв				ctype.h

floor()			floor()					Снижает нецелое число к ближайшему целому числу				math.h
ceil()			ciel()					Возносит нецелое число к ближайшему целому числу			math.h
fabs()			fabs()					Возвращает абсолютное значение числа с плав.точкой (без знака)		math.h
pow()			x=pow(число, степень)			Возводит число в степень						math.h
sqrt()			x=sqrt(value)				Возвращает квадратный корень. Тип значений должен быть double		math.h

bool			bool					Псевдоним _Bool								stdbool.h
true			true					Псевдоним 1								stdbool.h
false			false					Псевдоним 0								stdbool.h



**********************************************************
dice = (rand() % 5) + 1; /* генерирует число от 1 до 6 */
**********************************************************
******************************Аргументы функции fopen():***************************************
w	Открывает новый файл для чтения и записи			Последовательный доступ
r	Открывает существующий файл для чтения и записи			Последовательный доступ
a	Открывает файл в режиме дозаписи (указатель на конец файла)	Последовательный доступ	
-
w+	Открывает новый файл для чтения и записи			Произвольный доступ
r+	Открывает существующий файл для чтения и записи			Произвольный доступ
a+	Открывает файл в режиме дозаписи (указатель на конец файла)	Произвольный доступ
***********************************************************************************************
*****************************Функция fseek()***************************************************
fseek(filePtr, longVal, начало)
filePrt - указатель на файл;
longVal - значение типа long int в байтах, на которое переместиться назад или вперед;
Начало =
SEEK_SET - начало файла;
SEEK_CUR - текущая позиция в файле;
SEEK_END - конец фала;
***********************************************************************************************
Чтобы программа не закрывалась до нажатия пользоватем клавиши Enter 
*******************************************************************
getchar(); // поставить перед return 0 в функции main
***********************************************************************************************
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
====================================================
Спецификаторы преобразования форматного ввода/вывода:
====================================================
%d - целое число int
%f - число с плавающей точкой float и double (десятичное)
%c - одиночный символ
%s - символьная строка
%zd - спецификатор вывода данных функции sizeof();
%i - Десятичное целое число со знаком (то же, что и %d)
%e - Число с плавающей запятой, экспоненциальное представление
%E - Число с плавающей запятой, экспоненциальное представление 
%g - В зависимости от значения использует %f или %е. Спецификатор %е применяется,
если показатель степени меньше -4 либо больше или равен указанной ТОЧНОСТИ
%G - В зависимости от значения использует %f или %е. Спецификатор %Е применяется,
если показатель степени меньше -4 либо больше или равен указанной точности
%o - Восьмеричное целое число без знака
%p - указатель
%u - Десятичное целое число без знака
%x - Шестнадцатеричное целое число без знака, используются шестнадцатеричные цифры Of
%X - Шестнадцатеричное целое число без знака, используются шестнадцатеричные цифры OF
%a - Число с плавающей запятой, шестнадцатеричные цифры и р-запись (С99/С11)
%A - Число с плавающей запятой, шестнадцатеричные цифры и Р-запись (С99/С11)
%% - знак процента
******************************************************
-------------------------------------------------------
=====================
<limits.h>
=====================
CHAR_BIT		Количество битов в типе char
CHAR_MAX		Максимальное значение типа char
CHAR_MIN		Минимальное значение типа char
SCHAR_MAX		Максимальное значение типа signed char
SCHAR_MIN		Минимальное значение типа signed char
UCHAR_MAX		Максимальное значение типа unsigned char
SHRT_MAX		Максимальное значение типа short
SHRT_MIN		Минимальное значение типа short
USHRT_MAX		Максимальное значение типа unsigned short
INT_MAX			Максимальное значение типа int
INT_MIN			Минимальное значение типа int
UINT_MAX		Максимальное значение типа unsigned int
LONG_MAX		Максимальное значение типа long
LONG_MIN		Минимальное значение типа long
ULONG_MAX		Максимальное значение типа unsigned long
LLONG_MAX		Максимальное значение типа long long
LLONG_MIN		Минимальное значение типа long long
ULLONG_MAX		Максимальное значение типа unsigned int
********************************************************
=====================
<float.h>
=====================
FLT_MANT_DIG		Количество бит в мантиссе типа float
FLT_DIG			Минимальное количество значащих десятичных цифр для типа float
FLT_MIN_10_EXP		Минимальное значение отрицательного десятичного порядка для 
типа float с полным набором значащих цифр

FLT_MAX_10_EXP		Максимальное значение положительного десятичного порядка для типа float
FLT_MIN			Минимальное значение для положительного числа типа float,сохраняющего полную точность
FLT_MAX			Максимальное значение для положительного числа типа float
FLT_EPSILON		Разница между 1.00 и минимальным значением float, которое больше 1.00

Эквивалентные константы определены для типов double и long double;
в их именах вместо FLT применяются строки DBL и LDBL.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

=====================
ЦИКЛЫ и ВЕТВЛЕНИЯ
=====================
------------------
if-else
------------------
if(условие)
	инструкции
else 
	инструкции
------------------
if-else-if
------------------
if(условие1)
	инструкции
else if(условие2)
	инструкции
else if(условие3)
	инструкции
else if(условие4)
	инструкции
else 
	инструкции
------------------
switch
------------------
switch (выражение)
{
	case значение: инструкции
	case значение: инструкции
	case значение: инструкции
	default: инструкции
}	
------------------
while
------------------
while (условие)
{
	инструкция1
	инструкция2
}
------------------
do while
------------------
do {
	инструкии
} while (условие)
------------------
for
------------------
for (i = 0; i < 10; i++)
{
	инструкции
}

------------------
break		немедленный выход из цикла;
continue	начинает следующий шаг итерации
/////////////////////////////////////////////////////////////////////////////////////////////////////////////