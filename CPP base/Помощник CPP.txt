	 -------------------------------
	|	Помощник по C++		|
	 -------------------------------

===========================
ОБЩЕЕ
===========================

#include <iostream> // Форма ввода библиотеки в программу
using namespace std; //ввод стандартного пространства имен в программу
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
===========================
ОСНОВНОЕ
===========================
cin >>			cin >> str			Ввод с клавиатуры в переменную str
cout <<			cout << "Привет"		Вывод на экран строку "Привет"
cin.get()		cin.get(str, max)		Ввод с клавиатуры строки с пробелами в массив str
operator		void operator++()		Перегрузка оператора
				{ ++count }
explicit	Ключевое слово, помещаемое перед конструтором с 1 арг, препятствует преобразованию типов
		Делает конструктор явным, исключая тем самым неявные перобразования
mutable		Создает изменяемое поле в неизменяемом(константном const) объекте
const		const int a = 5;			Объявление константы
const int* cptrInt;		// указатель на константу - можно изменить указатель, но нельзя переменную
int* const ptrcInt;		// константный указатель - можно изменить переменную, но нельзя указатель

->			distptr->getdist();		операция достпука к членам класса
Применяется для указателей на объекты. Тоже самое что и (*distptr).getdist() через операции раазыменования и доступа; 
===========================
ВЫДЕЛЕНИЕ ПАМЯТИ
===========================
new[]		ptr = new char[len]		Выделение памяти под строку типа char, длинной len ([] - для массивов)
new - оператор
char* ptr;		// указатель должен быть объявлен, и тип данных должен совпадать с выделяемым
len - число переменных типа char

delete[]	delete[] ptr			Возвращает системе память, на которую указывал указатель ptr
						([] - для массивов)

Для объектов:
ptr = new someClass;		// создаем один объект
delete ptr;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
===========================
ТИПЫ ПЕРЕМЕННЫХ
===========================
Явное приведение типов:
static_cast<тип треб>(переменная)		Напр: aChar = static_cast<char>(anIntVar)
ptrint=reinterpret_cast<int*>(&flovar);		Приведение типа указателя
-----------
Название	Ниж.гран	Верх.гран	Точность	Размер(байт)
bool		False		True		нет		1
char		-128		127		нет		1
short		-32768		32767		нет		2
int		-2147483648	2147483647	нет		4
long		-2147483648	2147483647	нет		4
float		3.4*10^-38	3.4*10^38	7		4
double		1.7*10^-308	10.7*10^308	15		8
-----------
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
===========================
СТРОКИ
===========================
strlen()		strlen(str)		Определяет длину строки
+++++++++++++++++++++++++++
class string		Стандртный класс, содержащий методы работы со строками
+++++++++++++++++++++++++++
swap()		s1.swap(s2)		Метод стд.класса string, меняющий местами значения объектов
					(Применяется для объекта s1, a s2 является его аргументом)
find()		a=s1.find("Оно")	Метод осуществляет поиск подстроки "Оно" в строке s1.Возвращает номер 
					позиции(начиная нумерацию с 0)
find_first_of()				Поиск любого символа из группы и возврат позиции первого найденного
find_first_of()				Поиск любого символа, который не входит в группу и возврат позиции
					первого найденного
rfind()					Переворачивает строку
find_last_of()				Ищет последний символ, совпадающий с группой заданных символов
find_last_not_of()			Ищет последний символ, не совпадающий с группой заданных символов
erase()		erase(нач.поз, длина фраг)			Удаляет фрагмент из строки
replace()	replace(нач.поз, кол-во симв, строка)		Заменяет часть строки на другую строку
insert()	insert(место, строка)				Вставляет строку
size()		size(объект)					Возвращает количество символов объекта string
append()	append()					Добавляет символы к объекту string

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
===========================
ПЕРЕЧИСЛЕНИЯ
===========================

enum	объявление перечисления
Пример:
enum months { Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec };	// месяцы года
enum switch { off, on }; // переключатель 
enum meridian { am, pm }; // меридиан 
enum chess { pawn, knight, bishop, rook, queen, king };			// шахматные фигуры 
enum coins { penny, nickel, dime, quarter, half-dollar, dollar };	// монеты
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
===========================
ЗАГОЛОВКИ и ФУНКЦИИ
===========================

Заголовок:			Функции:

<iostream>			cout <<
				cin >>
<iomanip>			setw(кол-во пробелов) // Смещает вывод на заданное количество пробелов через cout

<cmath>				sqrt (); /* корень квадратный, в скобки помещается рагумент,
					 который должен иметь значение типа double */

				pow (b,e); // возведение в степнь b-аргумент, e - степень)



<cstdlib>			rand (); // генерирует случайное число
				atof(); // Преобразует строку в значение типа double и возвращает результат
				atol(); // Преобразует строку в значение типа long int и возвращает результат
				atoi(); // Преобразует строку в значение типа int и возвращает результат

<cstdio>			gets (); Считывает строку с клавиатуры в массив, в скобках имя массива;

<conio.h>			getche(); Считывает символ введенный с клавиатуры, не дожидаясь нажатия Enter

<cstring>			strcpy (to, from); //Копирует содерживое строки from в строку to
				strcat (s1, s2); // Присоединяет строку s2 к концу строки s1 (s2 при этом не меняется)
				strlen (s); // Возвращает длинну строки аргумента s
				strcmp (s1, s2); // Сравнивает строку s2 со строкой s1 и возваращает 0 если они равны, 
						// <0, если s1 идет перед s2, и >0, если s1 идет после s2
						// Используется для сортировки строк

<cctype>		 	toupper (); // Вовращает прописной (Заглавный) эквивалент своего символьного аргумента
				tolower (); // Вовращает строчный эквивалент своего символьного аргумента
				isupper (); // Возвращает значение ИСТИНА если исследуемая буква является прописной
				islower (); // Возвращает значение ИСТИНА если исследуемая буква является строчной
				isalpha (); // Возвращает значение ИСТИНА если аргумент является буквой алфавита
				isdigit (); // Возвращает значение ИСТИНА если аргумент является буквой цифрой?
				isspace (); // Возвращает значение ИСТИНА если аргумент является пробелом?

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
						ООП							
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
===========================
КЛАСС
===========================

class newClass 		// создание класса newClass
{
	private:
		int var;
	public:
		set_var()
		{
			тело метода
		}
		get_var()
		{
			тело метода
		}
	
};
===========================
ОБЪЕКТ
===========================
newClass obj1;		// создание объекта obj1 класса newClass
newClass jbj2(1, 24.2);	// создание объекта с аргументами, передаваемыми конструктору;
===========================
КОНСТРУКТОР
===========================
Список инициализации:
newClass() : var1(0), var2(1), var3(88)
	{ }
===========================
ДЕСТРУКТОР
===========================
~newClass()	
	{ }
===========================
МЕТОД ВНЕ КЛАССА
===========================
void newClass::add_dist(neClass obj1, newClass obj2)	// с использованием объектов в качестве агрументов
	{ }
===========================
Разное
===========================
virtual			virtual				Определение виртуальной функции
friend			friend int func();		Определение дружественной фушкции(имеющей доступ к private
							полям классов)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
