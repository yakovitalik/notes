// наследование класса Counter для добавления деинкримента

#include <iostream>
using namespace std;
//////////////////////////////////////////////////////////////////////////////
class Counter					// базовый класс
{
protected:
	unsigned int count;			// значение счетчика
public:
	Counter() : count(0)			// конструктор без параметров
		{ }
	Counter(int c) : count (c)		// конструктор с одним параметром
		{ }
	unsigned int get_count()		// метод для получения значения счетчика
		{ return count; }
	Counter operator++()			// перегрузка оператора ++
		{ return Counter(++count); } 	// увеличивает значение счетчика(префикс)
};
//////////////////////////////////////////////////////////////////////////////
class CuntDn : public Counter			// производный класс
{
public:
	Counter operator--()			// перегрузка оператора --
		{ return Counter(--count); }	// уменьшает значение счетчика
};
//////////////////////////////////////////////////////////////////////////////
int main()
{
	CountDn c1;				// объект c1
	cout << "\n c1 =" << c1.get_count();	// вывод на экран
	++c1; ++c1; ++c1;			// инкреминирование с1 три раза

	cout << "\n c1 =" << c1.get_count();	// вывод на экран
	--c1; --c1;				// уменьшаем c1 два раза
	
	cout << "\n c1 =" << c1.get_count();	// вывод на экран	
	cout << endl;
	
	return 0;
}